/* Generated By:JavaCC: Do not edit this line. Norms.java */
package es.upv.dsic.gti_ia.norms;

import es.upv.dsic.gti_ia.organization.exception.THOMASMessages.MessageID;
import es.upv.dsic.gti_ia.organization.exception.InvalidParametersException;
import es.upv.dsic.gti_ia.organization.exception.THOMASMessages;
import es.upv.dsic.gti_ia.organization.exception.NotCreatorInParentUnitException;
import es.upv.dsic.gti_ia.organization.exception.THOMASException;


public class Norms implements NormsConstants {

private THOMASMessages    l10n;

        public void parser() throws THOMASException, Exception, Error
        {
          l10n = new THOMASMessages();

        switch (this.one_line())
        {
          case 0 :
          System.out.println("OK.");
          break;
          case 1 :
          System.out.println("Goodbye.");
          break;
          default :
          break;
        }
   }

  final public int one_line() throws ParseException, THOMASException {
    trace_call("one_line");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 59:
        norm();
        jj_consume_token(58);
    {if (true) return 0;}
        break;
      case 58:
        jj_consume_token(58);
    {if (true) return 1;}
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("one_line");
    }
  }

  final public void norm() throws ParseException, THOMASException {
    trace_call("norm");
    try {
      jj_consume_token(59);
      id();
      jj_consume_token(60);
      deontic();
      jj_consume_token(61);
      target();
      jj_consume_token(61);
      action();
      jj_consume_token(61);
      activation();
      jj_consume_token(61);
      expiration();
      jj_consume_token(62);
    } finally {
      trace_return("norm");
    }
  }

  final public void id() throws ParseException {
    trace_call("id");
    try {
      stringConstant();
    } finally {
      trace_return("id");
    }
  }

  final public void deontic() throws ParseException {
    trace_call("deontic");
    try {
      jj_consume_token(deontic);
    } finally {
      trace_return("deontic");
    }
  }

  final public void target() throws ParseException {
    trace_call("target");
    try {
      jj_consume_token(LESS);
      targetType();
      jj_consume_token(63);
      value();
      jj_consume_token(HIGHER);
    } finally {
      trace_return("target");
    }
  }

  final public void activation() throws ParseException, THOMASException {
    trace_call("activation");
    try {
      if (jj_2_1(2)) {
        expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 64:
          jj_consume_token(64);
          break;
        default:
          jj_la1[1] = jj_gen;

        }
      }
    } finally {
      trace_return("activation");
    }
  }

  final public void expiration() throws ParseException, THOMASException {
    trace_call("expiration");
    try {
      if (jj_2_2(2)) {
        expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 64:
          jj_consume_token(64);
          break;
        default:
          jj_la1[2] = jj_gen;

        }
      }
    } finally {
      trace_return("expiration");
    }
  }

  final public void targetType() throws ParseException {
    trace_call("targetType");
    try {
      jj_consume_token(targetType);
    } finally {
      trace_return("targetType");
    }
  }

  final public void value() throws ParseException {
    trace_call("value");
    try {
      stringConstant();
    } finally {
      trace_return("value");
    }
  }

  final public void genAtomicCondition() throws ParseException, THOMASException {
    trace_call("genAtomicCondition");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case isUnit:
      case hasType:
      case hasParent:
      case isRole:
      case hasAccessibility:
      case hasVisibility:
      case hasPosition:
      case isNorm:
      case hasContent:
      case isAgent:
      case playsRole:
      case roleCardinality:
      case positionCardinality:
        OMSCondition();
        break;
      case variable:
      case stringConstant:
      case 64:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
        genAtomicFormula();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("genAtomicCondition");
    }
  }

  final public void genAtomicFormula() throws ParseException {
    trace_call("genAtomicFormula");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case stringConstant:
        stringConstant();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 65:
          jj_consume_token(65);
          listOfTerms();
          jj_consume_token(66);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        break;
      case variable:
      case 64:
        variable();
        break;
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
        OMSConstants();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("genAtomicFormula");
    }
  }

  final public void action() throws ParseException, THOMASException {
    trace_call("action");
    try {
      OMSAction();
    } finally {
      trace_return("action");
    }
  }

  final public void atom() throws ParseException {
    trace_call("atom");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
        OMSConstants();
        break;
      case stringConstant:
        stringConstant();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("atom");
    }
  }

  final public void listOfTerms() throws ParseException {
    trace_call("listOfTerms");
    try {
      term();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 61:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_1;
        }
        jj_consume_token(61);
        term();
      }
    } finally {
      trace_return("listOfTerms");
    }
  }

  final public void term() throws ParseException {
    trace_call("term");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case numericConstant:
      case stringConstant:
        constant();
        break;
      case variable:
      case 64:
        variable();
        break;
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
        OMSConstants();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("term");
    }
  }

  final public void expression() throws ParseException, THOMASException {
    trace_call("expression");
    try {
      if (jj_2_3(2)) {
        simpleExpression();
        expressionRest();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          jj_consume_token(NOT);
          expression();
          expressionRest();
          break;
        case 65:
          jj_consume_token(65);
          expression();
          jj_consume_token(66);
          expressionRest();
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("expression");
    }
  }

  final public void expressionRest() throws ParseException, THOMASException {
    trace_call("expressionRest");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        expression();
        break;
      case OR:
        jj_consume_token(OR);
        expression();
        break;
      default:
        jj_la1[10] = jj_gen;

      }
    } finally {
      trace_return("expressionRest");
    }
  }

  final public void simpleExpression() throws ParseException, THOMASException {
    trace_call("simpleExpression");
    try {
      if (jj_2_4(2147483647)) {
        relExpression();
      } else if (jj_2_5(2147483647)) {
        genAtomicCondition();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("simpleExpression");
    }
  }

  final public void relExpression() throws ParseException, THOMASException {
    trace_call("relExpression");
    try {
      relTerm();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LESS:
          jj_consume_token(LESS);
          break;
        case HIGHER:
          jj_consume_token(HIGHER);
          break;
        case EQUAL:
          jj_consume_token(EQUAL);
          break;
        case NOTEQUAL:
          jj_consume_token(NOTEQUAL);
          break;
        case LESSOREQUAL:
          jj_consume_token(LESSOREQUAL);
          break;
        case HIGHEROREQUAL:
          jj_consume_token(HIGHEROREQUAL);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        relTerm();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTEQUAL:
        case EQUAL:
        case LESS:
        case LESSOREQUAL:
        case HIGHER:
        case HIGHEROREQUAL:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_2;
        }
      }
    } finally {
      trace_return("relExpression");
    }
  }

  final public void relTerm() throws ParseException, THOMASException {
    trace_call("relTerm");
    try {
      if (jj_2_6(2147483647)) {
        arithExpression();
      } else if (jj_2_7(2147483647)) {
        genAtomicFormula();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("relTerm");
    }
  }

  final public void arithExpression() throws ParseException {
    trace_call("arithExpression");
    try {
      arithTerm();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUM:
        case SUBTRACTION:
        case MULTIPLICATION:
        case POWER:
        case DIVISION:
        case INTDIVISION:
        case MODULE:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUM:
          jj_consume_token(SUM);
          break;
        case SUBTRACTION:
          jj_consume_token(SUBTRACTION);
          break;
        case MULTIPLICATION:
          jj_consume_token(MULTIPLICATION);
          break;
        case POWER:
          jj_consume_token(POWER);
          break;
        case DIVISION:
          jj_consume_token(DIVISION);
          break;
        case INTDIVISION:
          jj_consume_token(INTDIVISION);
          break;
        case MODULE:
          jj_consume_token(MODULE);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        arithTerm();
      }
    } finally {
      trace_return("arithExpression");
    }
  }

  final public void arithTerm() throws ParseException {
    trace_call("arithTerm");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case numericConstant:
        numericConstant();
        break;
      case variable:
      case 64:
        variable();
        break;
      case SUBTRACTION:
        jj_consume_token(SUBTRACTION);
        arithTerm();
        break;
      case 65:
        jj_consume_token(65);
        arithExpression();
        jj_consume_token(66);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("arithTerm");
    }
  }

  final public void variable() throws ParseException {
    trace_call("variable");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case variable:
        jj_consume_token(variable);
        break;
      case 64:
        jj_consume_token(64);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("variable");
    }
  }

  final public void constant() throws ParseException {
    trace_call("constant");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case stringConstant:
        stringConstant();
        break;
      case numericConstant:
        numericConstant();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("constant");
    }
  }

  final public void numericConstant() throws ParseException {
    trace_call("numericConstant");
    try {
      jj_consume_token(numericConstant);
    } finally {
      trace_return("numericConstant");
    }
  }

  final public void stringConstant() throws ParseException {
    trace_call("stringConstant");
    try {
      jj_consume_token(stringConstant);
    } finally {
      trace_return("stringConstant");
    }
  }

  final public void normContent() throws ParseException, THOMASException {
    trace_call("normContent");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 60:
        jj_consume_token(60);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case deontic:
          jj_consume_token(deontic);
          break;
        case 64:
          jj_consume_token(64);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(61);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LESS:
          target();
          break;
        case 64:
          jj_consume_token(64);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(61);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case registerUnit:
        case deregisterUnit:
        case registerRole:
        case deregisterRole:
        case registerNorm:
        case deregisterNorm:
        case allocateRole:
        case deallocateRole:
        case joinUnit:
        case informAgentRole:
        case informMembers:
        case informQuantityMembers:
        case informUnit:
        case informUnitRoles:
        case informTargetNorms:
        case informRole:
        case informNorm:
        case acquireRole:
        case leaveRole:
          action();
          break;
        case 64:
          jj_consume_token(64);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(61);
        activation();
        jj_consume_token(61);
        expiration();
        jj_consume_token(62);
        break;
      case 64:
        jj_consume_token(64);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("normContent");
    }
  }

  final public void OMSCondition() throws ParseException, THOMASException {
    trace_call("OMSCondition");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case isUnit:
      case hasType:
      case hasParent:
        OMSUnitPred();
        break;
      case isRole:
      case hasAccessibility:
      case hasVisibility:
      case hasPosition:
        OMSRolesPred();
        break;
      case isNorm:
      case hasContent:
        OMSNormsPred();
        break;
      case isAgent:
      case playsRole:
      case roleCardinality:
      case positionCardinality:
        OMSRoleEnactPred();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OMSCondition");
    }
  }

  final public void OMSUnitPred() throws ParseException {
    trace_call("OMSUnitPred");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case isUnit:
        jj_consume_token(isUnit);
        jj_consume_token(65);
        term();
        jj_consume_token(66);
        break;
      case hasType:
        jj_consume_token(hasType);
        jj_consume_token(65);
        term();
        jj_consume_token(61);
        term();
        jj_consume_token(66);
        break;
      case hasParent:
        jj_consume_token(hasParent);
        jj_consume_token(65);
        term();
        jj_consume_token(61);
        term();
        jj_consume_token(66);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OMSUnitPred");
    }
  }

  final public void OMSRolesPred() throws ParseException, THOMASException {
    trace_call("OMSRolesPred");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case isRole:
          jj_consume_token(isRole);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case hasAccessibility:
          jj_consume_token(hasAccessibility);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case hasVisibility:
          jj_consume_token(hasVisibility);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case hasPosition:
          jj_consume_token(hasPosition);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Exception e) {
                //String message = l10n.getMessage(MessageID.NOT_CREATOR_IN_PARENT_UNIT, "");
                {if (true) throw new NotCreatorInParentUnitException(e.getMessage());}
      }
    } finally {
      trace_return("OMSRolesPred");
    }
  }

  final public void OMSNormsPred() throws ParseException, THOMASException {
    trace_call("OMSNormsPred");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case isNorm:
        jj_consume_token(isNorm);
        jj_consume_token(65);
        term();
        jj_consume_token(61);
        term();
        jj_consume_token(66);
        break;
      case hasContent:
        jj_consume_token(hasContent);
        jj_consume_token(65);
        term();
        jj_consume_token(61);
        term();
        jj_consume_token(61);
        normContent();
        jj_consume_token(66);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OMSNormsPred");
    }
  }

  final public void OMSRoleEnactPred() throws ParseException {
    trace_call("OMSRoleEnactPred");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case isAgent:
        jj_consume_token(isAgent);
        jj_consume_token(65);
        term();
        jj_consume_token(66);
        break;
      case playsRole:
        jj_consume_token(playsRole);
        jj_consume_token(65);
        term();
        jj_consume_token(61);
        term();
        jj_consume_token(61);
        term();
        jj_consume_token(66);
        break;
      case roleCardinality:
        jj_consume_token(roleCardinality);
        jj_consume_token(65);
        term();
        jj_consume_token(61);
        term();
        jj_consume_token(61);
        term();
        jj_consume_token(66);
        break;
      case positionCardinality:
        jj_consume_token(positionCardinality);
        jj_consume_token(65);
        term();
        jj_consume_token(61);
        term();
        jj_consume_token(61);
        term();
        jj_consume_token(66);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OMSRoleEnactPred");
    }
  }

  final public void OMSAction() throws ParseException, THOMASException {
    trace_call("OMSAction");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case registerUnit:
          registerUnit();
          break;
        case deregisterUnit:
          jj_consume_token(deregisterUnit);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case registerRole:
          jj_consume_token(registerRole);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case deregisterRole:
          jj_consume_token(deregisterRole);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case registerNorm:
          jj_consume_token(registerNorm);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case deregisterNorm:
          jj_consume_token(deregisterNorm);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case allocateRole:
          jj_consume_token(allocateRole);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case deallocateRole:
          jj_consume_token(deallocateRole);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case joinUnit:
          jj_consume_token(joinUnit);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case informAgentRole:
          jj_consume_token(informAgentRole);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case informMembers:
          jj_consume_token(informMembers);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case informQuantityMembers:
          jj_consume_token(informQuantityMembers);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case informUnit:
          jj_consume_token(informUnit);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case informUnitRoles:
          jj_consume_token(informUnitRoles);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case informTargetNorms:
          jj_consume_token(informTargetNorms);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case informRole:
          jj_consume_token(informRole);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case informNorm:
          jj_consume_token(informNorm);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case acquireRole:
          jj_consume_token(acquireRole);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        case leaveRole:
          jj_consume_token(leaveRole);
          jj_consume_token(65);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(61);
          term();
          jj_consume_token(66);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
        System.out.println("----------Current token-----------");
        System.out.println("Current token: "+ e.currentToken);
        System.out.println("Current token begin line: "+ e.currentToken.beginLine);
        System.out.println("Current token begin column: "+ e.currentToken.beginColumn);
                System.out.println("Current token end line: "+ e.currentToken.endLine);
        System.out.println("Current token end column: "+ e.currentToken.endColumn);


        System.out.println("----------------------------------");
        System.out.println("Excepted tokens: "+ e.expectedTokenSequences[0][0]);
        System.out.println("----ERROR----: "+ e.getMessage());
                String message = l10n.getMessage(MessageID.NOT_CREATOR_IN_PARENT_UNIT, "");
                {if (true) throw new NotCreatorInParentUnitException(message);}
      }
    } finally {
      trace_return("OMSAction");
    }
  }

  final public void registerUnit() throws ParseException {
    trace_call("registerUnit");
    try {
      jj_consume_token(registerUnit);
      jj_consume_token(65);
      term();
      jj_consume_token(61);
      term();
      jj_consume_token(61);
      term();
      jj_consume_token(61);
      term();
      jj_consume_token(61);
      term();
      jj_consume_token(66);
    } finally {
      trace_return("registerUnit");
    }
  }

  final public void OMSConstants() throws ParseException {
    trace_call("OMSConstants");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 69:
      case 70:
      case 71:
      case 72:
        OMSPositions();
        break;
      case 73:
      case 74:
        OMSaccessibility();
        break;
      case 75:
      case 76:
        OMSVisibility();
        break;
      case 77:
      case 78:
      case 79:
        OMSUnitTypes();
        break;
      case 67:
        jj_consume_token(67);
        break;
      case 68:
        jj_consume_token(68);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OMSConstants");
    }
  }

  final public void OMSPositions() throws ParseException {
    trace_call("OMSPositions");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 69:
        jj_consume_token(69);
        break;
      case 70:
        jj_consume_token(70);
        break;
      case 71:
        jj_consume_token(71);
        break;
      case 72:
        jj_consume_token(72);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OMSPositions");
    }
  }

  final public void OMSaccessibility() throws ParseException {
    trace_call("OMSaccessibility");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 73:
        jj_consume_token(73);
        break;
      case 74:
        jj_consume_token(74);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OMSaccessibility");
    }
  }

  final public void OMSVisibility() throws ParseException {
    trace_call("OMSVisibility");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 75:
        jj_consume_token(75);
        break;
      case 76:
        jj_consume_token(76);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OMSVisibility");
    }
  }

  final public void OMSUnitTypes() throws ParseException {
    trace_call("OMSUnitTypes");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 77:
        jj_consume_token(77);
        break;
      case 78:
        jj_consume_token(78);
        break;
      case 79:
        jj_consume_token(79);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OMSUnitTypes");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3R_43() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_4()) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3R_19()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(roleCardinality)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(hasVisibility)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(registerUnit)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_5()) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(hasParent)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(leaveRole)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(hasContent)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_71()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(acquireRole)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(informNorm)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(playsRole)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(informRole)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(informTargetNorms)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(informUnitRoles)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(informUnit)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(informQuantityMembers)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(informMembers)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(informAgentRole)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(joinUnit)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(deallocateRole)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(allocateRole)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(hasAccessibility)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(deregisterNorm)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(registerNorm)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(deregisterRole)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(registerRole)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(deregisterUnit)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(positionCardinality)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(isAgent)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(hasType)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(isNorm)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(hasPosition)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(isRole)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(isUnit)) return true;
    if (jj_scan_token(65)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(60)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    if (jj_scan_token(61)) return true;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    if (jj_scan_token(61)) return true;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    if (jj_scan_token(61)) return true;
    if (jj_3R_76()) return true;
    if (jj_scan_token(61)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(LESS)) return true;
    if (jj_scan_token(6)) return true;
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(57)) return true;
    if (jj_scan_token(HIGHER)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(SUBTRACTION)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_4()) return true;
    if (jj_scan_token(66)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    }
    }
    }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    return false;
  }

  /** Generated Token Manager. */
  public NormsTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x180,0xfc00,0xfc00,0x7f0000,0x7f0000,0x20000,0x0,0x0,0x20,0x1000,0xff800000,0x0,0x0,0x0,0x0,0x0,0x0,0xff800000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xc000000,0x0,0x0,0x37ffc00,0x0,0x3000000,0x2000000,0x20000000,0x3800000,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,0x1000000,0x2800000,0x0,0x0,0x3ff,0x10000000,0x7ffc00,0x1c00,0x1e000,0x60000,0x780000,0x3ff,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x1,0x1,0xfff9,0x2,0xfff9,0xfff8,0x0,0xfff9,0x2,0x0,0x0,0x0,0x0,0x0,0x3,0x1,0x0,0x1,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0xfff8,0x1e0,0x600,0x1800,0xe000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Norms(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Norms(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NormsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Norms(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NormsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Norms(NormsTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(NormsTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[80];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 80; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
