/* Generated By:JavaCC: Do not edit this line. NormParserTokenManager.java */
package es.upv.dsic.gti_ia.norms;
import es.upv.dsic.gti_ia.organization.exception.THOMASMessages.MessageID;
import es.upv.dsic.gti_ia.organization.exception.InvalidIDException;
import es.upv.dsic.gti_ia.organization.exception.InvalidDeonticException;
import es.upv.dsic.gti_ia.organization.exception.InvalidTargetTypeException;
import es.upv.dsic.gti_ia.organization.exception.InvalidTargetValueException;
import es.upv.dsic.gti_ia.organization.exception.InvalidOMSActionException;
import es.upv.dsic.gti_ia.organization.exception.InvalidExpressionException;
import es.upv.dsic.gti_ia.organization.exception.THOMASMessages;
import es.upv.dsic.gti_ia.organization.exception.NotCreatorInParentUnitException;
import es.upv.dsic.gti_ia.organization.exception.THOMASException;
import java.util.ArrayList;

/** Token Manager. */
public class NormParserTokenManager implements NormParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 65;
            return 11;
         }
         if ((active0 & 0x776000000000000L) != 0L)
         {
            jjmatchedKind = 65;
            return 43;
         }
         if ((active0 & 0x5000000000000100L) != 0L)
         {
            jjmatchedKind = 5;
            return 55;
         }
         if ((active0 & 0x20000c03fe8008c0L) != 0L)
         {
            jjmatchedKind = 65;
            return 49;
         }
         if ((active0 & 0x88903fc00000000L) != 0L)
         {
            jjmatchedKind = 65;
            return 26;
         }
         return -1;
      case 1:
         if ((active0 & 0x7fff0c03ff8009c0L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 1;
            return 49;
         }
         if ((active0 & 0x3fc00000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 1;
            return 25;
         }
         return -1;
      case 2:
         if ((active0 & 0x7fff0ffffe0001c0L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
            return 49;
         }
         if ((active0 & 0x1800800L) != 0L)
            return 49;
         return -1;
      case 3:
         if ((active0 & 0x7fff0ffffe0001c0L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
            return 49;
         }
         return -1;
      case 4:
         if ((active0 & 0x7fff0ffffe0001c0L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 4;
            return 49;
         }
         return -1;
      case 5:
         if ((active0 & 0x7f760ffffe0001c0L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 5;
            return 49;
         }
         if ((active0 & 0x89000000000000L) != 0L)
            return 49;
         return -1;
      case 6:
         if ((active0 & 0x77740ffffe0001c0L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
            return 49;
         }
         if ((active0 & 0x802000000000000L) != 0L)
            return 49;
         return -1;
      case 7:
         if ((active0 & 0x77740ffdfe000140L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
            return 49;
         }
         if ((active0 & 0x200000080L) != 0L)
            return 49;
         return -1;
      case 8:
         if ((active0 & 0x617007fdfe000100L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 8;
            return 49;
         }
         if ((active0 & 0x1604080000000040L) != 0L)
            return 49;
         return -1;
      case 9:
         if ((active0 & 0x6070049dfe000100L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 9;
            }
            return 49;
         }
         if ((active0 & 0x100036000000000L) != 0L)
            return 49;
         return -1;
      case 10:
         if ((active0 & 0x603000ddfe000100L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 10;
            return 49;
         }
         if ((active0 & 0x40040000000000L) != 0L)
            return 49;
         return -1;
      case 11:
         if ((active0 & 0x603000dd54000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 11;
            return 49;
         }
         if ((active0 & 0xaa000100L) != 0L)
            return 49;
         return -1;
      case 12:
         if ((active0 & 0x20000800000000L) != 0L)
            return 49;
         if ((active0 & 0x601000d554000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 12;
            return 49;
         }
         return -1;
      case 13:
         if ((active0 & 0x601000d400000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 13;
            return 49;
         }
         if ((active0 & 0x154000000L) != 0L)
            return 49;
         return -1;
      case 14:
         if ((active0 & 0x4010009000000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 14;
            return 49;
         }
         if ((active0 & 0x2000004400000000L) != 0L)
            return 49;
         return -1;
      case 15:
         if ((active0 & 0x10000000000000L) != 0L)
            return 49;
         if ((active0 & 0x4000009000000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 15;
            return 49;
         }
         return -1;
      case 16:
         if ((active0 & 0x4000001000000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 16;
            return 49;
         }
         if ((active0 & 0x8000000000L) != 0L)
            return 49;
         return -1;
      case 17:
         if ((active0 & 0x4000001000000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 17;
            return 49;
         }
         return -1;
      case 18:
         if ((active0 & 0x4000000000000000L) != 0L)
            return 49;
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 18;
            return 49;
         }
         return -1;
      case 19:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 19;
            return 49;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 38:
         return jjStopAtPos(0, 9);
      case 40:
         return jjStopAtPos(0, 72);
      case 41:
         return jjStopAtPos(0, 73);
      case 42:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 43:
         return jjStopAtPos(0, 18);
      case 44:
         return jjStopAtPos(0, 68);
      case 45:
         return jjStopAtPos(0, 19);
      case 47:
         return jjStopAtPos(0, 22);
      case 58:
         return jjStopAtPos(0, 70);
      case 60:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 62:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 64:
         return jjStopAtPos(0, 66);
      case 91:
         return jjStopAtPos(0, 67);
      case 92:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 93:
         return jjStopAtPos(0, 69);
      case 95:
         return jjStopAtPos(0, 71);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x40080000040L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x154800000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x776000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x88903fc00000000L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x5000000000000100L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000002a000080L);
      case 124:
         return jjStopAtPos(0, 10);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         break;
      case 61:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x776000000000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8017e000000L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000080000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x3fc00000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000201000980L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x889000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(2, 12);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000080100000000L);
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 49);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x3fc00000000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2a000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000080000080L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x54000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4776000000000100L);
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 49);
         break;
      case 118:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x410000000000000L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x44000000000000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x202000000000000L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000054000080L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000002a000100L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000200000040L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8803fc80000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x204000000000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x410000080000000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x900080000000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x54000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x21040000000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000100000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8003fc00000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000002a000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000140L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000080000000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000080000080L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L);
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 49);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000054000100L);
      case 109:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 49);
         return jjMoveStringLiteralDfa6_0(active0, 0x3fc00000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000200000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000100000000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x204040000000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x60000000000000L);
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 49);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000002a000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 81:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x6000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 49);
         return jjMoveStringLiteralDfa7_0(active0, 0x1404002a000000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x460000200000000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x5000080000000100L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x54000000L);
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 49);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x8100000000L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L);
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 7, 49);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000880000000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000080000000000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x4004006000000100L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x400030000000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x2a000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 49);
         return jjMoveStringLiteralDfa8_0(active0, 0x140000054000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000100L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x88000000L);
      case 85:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 6, 49);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 49);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 60, 49);
         return jjMoveStringLiteralDfa9_0(active0, 0x454000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x2160006000000000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 110:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 58, 49);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x28000000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L);
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 50, 49);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 57, 49);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000100L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      case 99:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 56, 49);
         break;
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 40, 49);
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x20040000000000L);
      case 109:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 41, 49);
         break;
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000001402000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000a8000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x54000000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L);
      case 82:
         return jjMoveStringLiteralDfa11_0(active0, 0x4110000000L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L);
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 42, 49);
         return jjMoveStringLiteralDfa11_0(active0, 0x8800000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000002000000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x88000000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x100L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 54, 49);
         break;
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000020000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x1400000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(11, 8, 49);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 27, 49);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(11, 31, 49);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x10001000000000L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L);
      case 109:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 29, 49);
         break;
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x4150000000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(11, 25, 49);
         return jjMoveStringLiteralDfa12_0(active0, 0x20008000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x6000000004000000L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x10004110000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L);
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(12, 35, 49);
         break;
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000L);
      case 121:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 53, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(13, 28, 49);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(13, 32, 49);
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000000L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000L);
      case 109:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(13, 30, 49);
         break;
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(13, 26, 49);
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000000L);
      case 121:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000L);
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000000L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(14, 34, 49);
         break;
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000L);
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 38, 49);
         break;
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000000000L);
      case 121:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 61, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000L);
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000000000L);
      case 109:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000L);
      case 121:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 52, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000000L);
      case 109:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 39, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000L);
      case 121:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 62, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 36, 49);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 81;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(49);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(49);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(49);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(49);
                  break;
               case 0:
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(45);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(49);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjstateSet[jjnewStateCnt++] = 47;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 60;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 0:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(49);
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(47);
                  }
                  if ((0x1804000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  else if (curChar == 115)
                     jjAddStates(0, 1);
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if (curChar == 112)
                     jjAddStates(2, 3);
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 1:
                  if (curChar == 114 && kind > 44)
                     kind = 44;
                  break;
               case 2:
               case 63:
                  if (curChar == 111)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 101)
                     jjCheckNAdd(1);
                  break;
               case 9:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 108 && kind > 45)
                     kind = 45;
                  break;
               case 14:
               case 21:
                  if (curChar == 97)
                     jjCheckNAdd(13);
                  break;
               case 15:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 27:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 116 && kind > 47)
                     kind = 47;
                  break;
               case 29:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 109 && kind > 47)
                     kind = 47;
                  break;
               case 33:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 121 && kind > 47)
                     kind = 47;
                  break;
               case 37:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 44:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(47);
                  break;
               case 48:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if (curChar == 112)
                     jjAddStates(2, 3);
                  break;
               case 51:
                  if (curChar == 99 && kind > 46)
                     kind = 46;
                  break;
               case 52:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 56:
                  if (curChar == 101 && kind > 46)
                     kind = 46;
                  break;
               case 57:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 115)
                     jjAddStates(0, 1);
                  break;
               case 64:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 101 && kind > 44)
                     kind = 44;
                  break;
               case 72:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 81 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   70, 80, 55, 61, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\141\147\145\156\164\116\141\155\145", 
"\162\157\154\145\116\141\155\145", "\160\157\163\151\164\151\157\156\116\141\155\145", "\46", "\174", 
"\156\157\164", "\134\75\75", "\75\75", "\74", "\74\75", "\76", "\76\75", "\53", "\55", "\52", 
"\52\52", "\57", "\144\151\166", "\155\157\144", 
"\162\145\147\151\163\164\145\162\125\156\151\164", "\144\145\162\145\147\151\163\164\145\162\125\156\151\164", 
"\162\145\147\151\163\164\145\162\122\157\154\145", "\144\145\162\145\147\151\163\164\145\162\122\157\154\145", 
"\162\145\147\151\163\164\145\162\116\157\162\155", "\144\145\162\145\147\151\163\164\145\162\116\157\162\155", 
"\141\154\154\157\143\141\164\145\122\157\154\145", "\144\145\141\154\154\157\143\141\164\145\122\157\154\145", 
"\152\157\151\156\125\156\151\164", "\151\156\146\157\162\155\101\147\145\156\164\122\157\154\145", 
"\151\156\146\157\162\155\115\145\155\142\145\162\163", 
"\151\156\146\157\162\155\121\165\141\156\164\151\164\171\115\145\155\142\145\162\163", "\151\156\146\157\162\155\125\156\151\164", 
"\151\156\146\157\162\155\125\156\151\164\122\157\154\145\163", "\151\156\146\157\162\155\124\141\162\147\145\164\116\157\162\155\163", 
"\151\156\146\157\162\155\122\157\154\145", "\151\156\146\157\162\155\116\157\162\155", 
"\141\143\161\165\151\162\145\122\157\154\145", "\154\145\141\166\145\122\157\154\145", null, null, null, null, 
"\151\163\125\156\151\164", "\150\141\163\124\171\160\145", "\150\141\163\120\141\162\145\156\164", 
"\151\163\122\157\154\145", "\150\141\163\101\143\143\145\163\163\151\142\151\154\151\164\171", 
"\150\141\163\126\151\163\151\142\151\154\151\164\171", "\150\141\163\120\157\163\151\164\151\157\156", "\151\163\116\157\162\155", 
"\150\141\163\104\145\157\156\164\151\143", "\150\141\163\124\141\162\147\145\164", 
"\150\141\163\101\143\164\151\157\156", "\151\163\101\147\145\156\164", "\160\154\141\171\163\122\157\154\145", 
"\162\157\154\145\103\141\162\144\151\156\141\154\151\164\171", 
"\160\157\163\151\164\151\157\156\103\141\162\144\151\156\141\154\151\164\171", null, null, null, "\100", "\133", "\54", "\135", "\72", "\137", "\50", "\51", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x3ffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[81];
private final int[] jjstateSet = new int[162];
protected char curChar;
/** Constructor. */
public NormParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public NormParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 81; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
