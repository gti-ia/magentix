/* Generated By:JavaCC: Do not edit this line. NormParser.java */
package es.upv.dsic.gti_ia.norms;


import es.upv.dsic.gti_ia.organization.exception.THOMASMessages.MessageID;
import es.upv.dsic.gti_ia.organization.exception.InvalidIDException;
import es.upv.dsic.gti_ia.organization.exception.InvalidDeonticException;
import es.upv.dsic.gti_ia.organization.exception.InvalidTargetTypeException;
import es.upv.dsic.gti_ia.organization.exception.InvalidTargetValueException;
import es.upv.dsic.gti_ia.organization.exception.InvalidOMSActionException;
import es.upv.dsic.gti_ia.organization.exception.InvalidExpressionException;
import es.upv.dsic.gti_ia.organization.exception.THOMASMessages;
import es.upv.dsic.gti_ia.organization.exception.NotCreatorInParentUnitException;
import es.upv.dsic.gti_ia.organization.exception.THOMASException;
import java.util.ArrayList;


public class NormParser implements NormParserConstants {

private THOMASMessages    l10n;

        public Norm parser() throws THOMASException, Exception, Error
        {
          try
          {

          l10n = new THOMASMessages();

          return norm();
          }
          catch(TokenMgrError err)
      {
                 String message = l10n.getMessage(MessageID.INVALID_EXPRESSION, err.getMessage());
                 throw new InvalidExpressionException(message);
       }
   }

 /**
 norm ::= "@"id"["deontinc","target","action","activation","expiration"]"
 */
  final public Norm norm() throws ParseException, InvalidIDException, Exception {
        Norm norm = null;
        String id, deontic, target, activation, expiration;
        ArrayList<String > targetArray = new ArrayList<String >();
        ArrayList<String > action = new ArrayList<String >();
        ArrayList<String > actionParameters = new ArrayList<String >();
    try {
      jj_consume_token(66);
      id = id();
      jj_consume_token(67);
      deontic = deontic();
      jj_consume_token(68);
      targetArray = target();
      jj_consume_token(68);
      action = action();
      jj_consume_token(68);
      activation = activation();
      jj_consume_token(68);
      expiration = expiration();
      jj_consume_token(69);
            norm = new Norm(id,deontic,targetArray.get(0), targetArray.get(1),action,activation,expiration);
                {if (true) return norm;}
    } catch (ParseException pex) {
            String message = l10n.getMessage(MessageID.INVALID_EXPRESSION,  pex.currentToken.next.beginColumn, getToken(0)+" "+getToken(1)+" "+getToken(2));
                {if (true) throw new InvalidExpressionException(message);}
    } catch (TokenMgrError err) {
                 String message = l10n.getMessage(MessageID.INVALID_EXPRESSION, err.getMessage());
                 {if (true) throw new InvalidExpressionException(message);}
    }
    throw new Error("Missing return statement in function");
  }

/**
	id ::= stringConstant
*/
  final public String id() throws ParseException, THOMASException {
        String id ="";
    try {
      id = stringConstant();
                                       {if (true) return id;}
    } catch (ParseException e) {
                String message = l10n.getMessage(MessageID.INVALID_ID, e.currentToken.next.beginLine, e.currentToken.next.beginColumn, getNextToken());
                {if (true) throw new InvalidIDException(message);}
    }
    throw new Error("Missing return statement in function");
  }

/**
	deontinc ::= "o"|"f"|"p"
*/
  final public String deontic() throws ParseException, THOMASException {
    try {
      jj_consume_token(deontic);
                            {if (true) return token.image;}
    } catch (ParseException e) {
                String message = l10n.getMessage(MessageID.INVALID_DEONTIC, e.currentToken.next.beginLine, e.currentToken.next.beginColumn, getNextToken());
                {if (true) throw new InvalidDeonticException(message);}
    }
    throw new Error("Missing return statement in function");
  }

/**
	target ::= "< "targetType ":" value " >"
*/
/*
String target() :
{
  String targetType = "";
  String value = "";
  }
{	"<" targetType = targetType() ":"  value = value()  ">"
	{return "< " + targetType + ":" + value + " >";}
}

*/
  final public ArrayList<String > target() throws ParseException, THOMASException {
  String targetType = "";
  String value = "";
  ArrayList<String > target = new ArrayList<String >();
    try {
      if (jj_2_1(2)) {
        jj_consume_token(LESS);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case agentName:
          jj_consume_token(agentName);
                               targetType = token.image;
          break;
        case roleName:
          jj_consume_token(roleName);
                                                                         targetType = token.image;
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(70);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case numericConstant:
          case stringConstant:
            value = constant();
            break;
          case 71:
            jj_consume_token(71);
                                                   value = token.image;
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (ParseException pex) {
                        String message = l10n.getMessage(MessageID.INVALID_TARGET_VALUE,  pex.currentToken.next.beginColumn,  getToken(1));
                        {if (true) throw new InvalidTargetValueException(message);}
        }
        jj_consume_token(HIGHER);
                target.add(targetType);
                target.add(value);
                {if (true) return target;}
      } else if (jj_2_2(2)) {
        jj_consume_token(LESS);
        jj_consume_token(positionName);
                                 targetType = token.image;
        jj_consume_token(70);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OMSPositions:
            value = OMSPositions();
            break;
          case 71:
            jj_consume_token(71);
                                                       value = token.image;
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(HIGHER);
        } catch (ParseException pex) {
                        String message = l10n.getMessage(MessageID.INVALID_TARGET_VALUE,  pex.currentToken.next.beginColumn, getToken(1));
                        {if (true) throw new InvalidTargetValueException(message);}
        }
                target.add(targetType);
                        target.add(value);
                        {if (true) return target;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException pex) {
                String message = l10n.getMessage(MessageID.INVALID_TARGET_TYPE,  pex.currentToken.next.beginColumn, getToken(2));
                {if (true) throw new InvalidTargetTypeException(message);}
    }
    throw new Error("Missing return statement in function");
  }

/*
/**
 	targetContent ::= "<" targetType() ":"  (value() | variable()) ">"
 */
/*
String targeContent():
{
  String targetTypeResult="";
  String valueResult = "";
  String variableResult = "";
}
{	"<" targetTypeResult = targetType() ":"  ( valueResult = value() | variableResult = variable()) ">"
	{return "<"+ targetTypeResult + ":" + valueResult + ""+ variableResult + " >"; }
	
	
}
*/
/**
	activation ::= expression | "_"
*/
  final public String activation() throws ParseException, THOMASException {
  String expression;
    if (jj_2_3(2)) {
      jj_consume_token(71);
               {if (true) return "";}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case SUBTRACTION:
      case OMSPositions:
      case OMSaccessibility:
      case OMSVisibility:
      case OMSUnitTypes:
      case isUnit:
      case hasType:
      case hasParent:
      case isRole:
      case hasAccessibility:
      case hasVisibility:
      case hasPosition:
      case isNorm:
      case hasDeontic:
      case hasTarget:
      case hasAction:
      case isAgent:
      case playsRole:
      case roleCardinality:
      case positionCardinality:
      case numericConstant:
      case variable:
      case stringConstant:
      case 71:
      case 72:
        expression = expression();
                             {if (true) return expression;}
        break;
      default:
        jj_la1[3] = jj_gen;

             {if (true) return "";}
      }
    }
    throw new Error("Missing return statement in function");
  }

/**
	expiration := expression |“_”
*/
  final public String expiration() throws ParseException, THOMASException {
  String result = "";
    if (jj_2_4(2)) {
      jj_consume_token(71);
       {if (true) return "";}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case SUBTRACTION:
      case OMSPositions:
      case OMSaccessibility:
      case OMSVisibility:
      case OMSUnitTypes:
      case isUnit:
      case hasType:
      case hasParent:
      case isRole:
      case hasAccessibility:
      case hasVisibility:
      case hasPosition:
      case isNorm:
      case hasDeontic:
      case hasTarget:
      case hasAction:
      case isAgent:
      case playsRole:
      case roleCardinality:
      case positionCardinality:
      case numericConstant:
      case variable:
      case stringConstant:
      case 71:
      case 72:
        result = expression();
                              {if (true) return result;}
        break;
      default:
        jj_la1[4] = jj_gen;

      {if (true) return "";}
      }
    }
    throw new Error("Missing return statement in function");
  }

/**
	targetType := “agentName” |“roleName” |“positionName”
*/
/*
String targetType():{
  String result = "";}
{	  < targetType >{return token.image;}
	  

}*/
/**
	value := stringConstant | "_"
*/
  final public String value() throws ParseException {
  String result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case stringConstant:
      result = stringConstant();
          {if (true) return result;}
      break;
    case 71:
      jj_consume_token(71);
               {if (true) return token.image;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	genAtomicCondition ::= OMSCondition |genAtomicFormula
*/
  final public String genAtomicCondition() throws ParseException, THOMASException {
   String result="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case isUnit:
    case hasType:
    case hasParent:
    case isRole:
    case hasAccessibility:
    case hasVisibility:
    case hasPosition:
    case isNorm:
    case hasDeontic:
    case hasTarget:
    case hasAction:
    case isAgent:
    case playsRole:
    case roleCardinality:
    case positionCardinality:
      result = OMSCondition();
         {if (true) return result;}
      break;
    case OMSPositions:
    case OMSaccessibility:
    case OMSVisibility:
    case OMSUnitTypes:
    case variable:
    case stringConstant:
    case 71:
      result = genAtomicFormula();
         {if (true) return result;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	genAtomicFormula ::= stringConstant [ “(” listOfTerms “)”] |variable |OMSConstants
*/
  final public String genAtomicFormula() throws ParseException {
  String stringConstantResult = "";
  String listOfTermsResult = "";
  String variableResult= "";
  String OMSConstantsResult = "";
  String op1 = "";
  String op2 = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case stringConstant:
      //(atom()| variable())["(" listOfTerms() ")"]
      
              stringConstantResult = stringConstant();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
        jj_consume_token(72);
                                                    op1 = token.image;
        listOfTermsResult = listOfTerms();
        jj_consume_token(73);
                                                                                                              op2 = token.image;
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
         {if (true) return stringConstantResult + op1 + listOfTermsResult + op2;}
      break;
    case variable:
    case 71:
      variableResult = variable();
         {if (true) return variableResult;}
      break;
    case OMSPositions:
    case OMSaccessibility:
    case OMSVisibility:
    case OMSUnitTypes:
      OMSConstantsResult = OMSConstants();
         {if (true) return OMSConstantsResult;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	action := OMSAction |genActionFormula
*/
  final public ArrayList<String > action() throws ParseException, THOMASException {
  ArrayList<String > result = new ArrayList<String >();
  String t = token.image;
    try {
      result = OMSAction();
          {if (true) return result;}
    } catch (ParseException pex) {
                StringBuffer expected = new StringBuffer();
                for (int i = 0; i < pex.expectedTokenSequences.length; i++) {
                for (int j = 0; j < pex.expectedTokenSequences[i].length; j++) {
                        expected.append(tokenImage[pex.expectedTokenSequences[i][j]]).append(' ');
                }
        }

                String message = l10n.getMessage(MessageID.INVALID_OMS_ACTION,  pex.currentToken.next.beginColumn, getNextToken(), expected.toString());
                {if (true) throw new InvalidOMSActionException(message);}
    }
    throw new Error("Missing return statement in function");
  }

/**
	atom ::= OMSConstants | stringConstant
*/
  final public String atom() throws ParseException {
  String result = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OMSPositions:
    case OMSaccessibility:
    case OMSVisibility:
    case OMSUnitTypes:
      result = OMSConstants();
                  {if (true) return result;}
      break;
    case stringConstant:
      result = stringConstant();
                 {if (true) return result;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	listOfTerms := term [ “,” term ] ∗
*/
  final public String listOfTerms() throws ParseException {
        String term;
        String term1 = "";
        String coma = "";
    term = term();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 68:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_1;
      }
      jj_consume_token(68);
                          coma = token.image;
      term1 = term();
    }
         {if (true) return term + coma + term1;}
    throw new Error("Missing return statement in function");
  }

/**
	term := constant |variable |OMSConstants
*/
  final public String term() throws ParseException {
  String term="";
  String constantString = "";
  String variableString = "";
  String OMSConstantsString = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numericConstant:
    case stringConstant:
      constantString = constant();
                               {if (true) return constantString;}
      break;
    case variable:
    case 71:
      variableString = variable();
                                  {if (true) return variableString;}
      break;
    case OMSPositions:
    case OMSaccessibility:
    case OMSVisibility:
    case OMSUnitTypes:
      OMSConstantsString = OMSConstants();
                                          {if (true) return OMSConstantsString;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	expression := simpleExpression |“not” expression |expression “&” expression |expression “||”’ expression |“(” expression
“)”
*/
  final public String expression() throws ParseException, THOMASException {
  String result="";
  String simpleExpression = "";
  String expressionRest = "";
  String operator = "";
  String expression = "";
    try {
      if (jj_2_5(2)) {
        simpleExpression = simpleExpression();
        expressionRest = expressionRest();
         {if (true) return simpleExpression + " " + expressionRest;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          jj_consume_token(NOT);
          expression = expression();
          expressionRest = expressionRest();
         {if (true) return operator +" " + expression + " " + expressionRest;}
          break;
        case 72:
          jj_consume_token(72);
          expression = expression();
          jj_consume_token(73);
          expressionRest = expressionRest();
         {if (true) return "(" + expression + ")" + " " + expressionRest;}
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException pex) {
        String message = l10n.getMessage(MessageID.INVALID_EXPRESSION,  pex.currentToken.next.beginColumn, getNextToken());
                {if (true) throw new InvalidExpressionException(message);}
    }
    throw new Error("Missing return statement in function");
  }

/**
	expressionRest ::= "and" expression() | "or" expression() | vacio
*/
  final public String expressionRest() throws ParseException, THOMASException {
  String result="";
  String operator = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
                 operator = token.image;
        result = expression();
             {if (true) return  operator + " "+  result;}
        break;
      case OR:
        jj_consume_token(OR);
                 operator = token.image;
        result = expression();
             {if (true) return  operator + " " + result;}
        break;
      default:
        jj_la1[13] = jj_gen;

         {if (true) return "";}
      }
    } catch (ParseException pex) {
        String message = l10n.getMessage(MessageID.INVALID_EXPRESSION,  pex.currentToken.next.beginColumn, getNextToken());
                {if (true) throw new InvalidExpressionException(message);}
    }
    throw new Error("Missing return statement in function");
  }

/**
	simpleExpression := genAtomicCondition |relExpression
*/
  final public String simpleExpression() throws ParseException, THOMASException {
String result = "";
    if (jj_2_6(2147483647)) {
      result = relExpression();
     {if (true) return result;}
    } else if (jj_2_7(2147483647)) {
      result = genAtomicCondition();
         {if (true) return result;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	relExpression := relTerm [ ( “ < ” |“ > ” |“==” |“! =” “ <= ” |“ >= ” ) relTerm ]+
*/
  final public String relExpression() throws ParseException, THOMASException {
 String relTerm1, relTerm2, operator;
    relTerm1 = relTerm();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
        jj_consume_token(LESS);
                                       operator = token.image;
        break;
      case HIGHER:
        jj_consume_token(HIGHER);
                                                                             operator = token.image;
        break;
      case EQUAL:
        jj_consume_token(EQUAL);
                                                                                                                 operator = token.image;
        break;
      case NOTEQUAL:
        jj_consume_token(NOTEQUAL);
                                                                                                                                                        operator = token.image;
        break;
      case LESSOREQUAL:
        jj_consume_token(LESSOREQUAL);
                                                                                                                                                                                                  operator = token.image;
        break;
      case HIGHEROREQUAL:
        jj_consume_token(HIGHEROREQUAL);
                                                                                                                                                                                                                                             operator = token.image;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      relTerm2 = relTerm();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOTEQUAL:
      case EQUAL:
      case LESS:
      case LESSOREQUAL:
      case HIGHER:
      case HIGHEROREQUAL:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_2;
      }
    }
         {if (true) return relTerm1 + operator + relTerm2;}
    throw new Error("Missing return statement in function");
  }

/**
	relTerm := genAtomicFormula |arithExpression
*/
  final public String relTerm() throws ParseException, THOMASException {
        String result="";
    if (jj_2_8(2147483647)) {
      result = arithExpression();
    {if (true) return result;}
    } else if (jj_2_9(2147483647)) {
      result = genAtomicFormula();
   {if (true) return result;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	arithExpression := arithTerm [ ( “+” |“-” |“*” |“**” |“/” |“div” |“mod” ) artihTerm]*
*/
  final public String arithExpression() throws ParseException {
   String arithTerm = "";
   String arithTerm2 = "";
   String operator = "";
    arithTerm = arithTerm();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUM:
      case SUBTRACTION:
      case MULTIPLICATION:
      case POWER:
      case DIVISION:
      case INTDIVISION:
      case MODULE:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUM:
        jj_consume_token(SUM);
                                         operator = token.image;
        break;
      case SUBTRACTION:
        jj_consume_token(SUBTRACTION);
                                                                                  operator = token.image;
        break;
      case MULTIPLICATION:
        jj_consume_token(MULTIPLICATION);
                                                                                                                              operator = token.image;
        break;
      case POWER:
        jj_consume_token(POWER);
                                                                                                                                                                   operator = token.image;
        break;
      case DIVISION:
        jj_consume_token(DIVISION);
                                                                                                                                                                                                         operator = token.image;
        break;
      case INTDIVISION:
        jj_consume_token(INTDIVISION);
                                                                                                                                                                                                                                                  operator = token.image;
        break;
      case MODULE:
        jj_consume_token(MODULE);
                                                                                                                                                                                                                                                                                      operator = token.image;
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      arithTerm2 = arithTerm();
    }
         {if (true) return arithTerm + operator + arithTerm2;}
    throw new Error("Missing return statement in function");
  }

/**
	arithTerm := numericConstant |variable |“-” arithTerm |“(” arithExpression “)”
*/
  final public String arithTerm() throws ParseException {
   String result ="";
   String arithTerm, arithExpression;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numericConstant:
      result = numericConstant();
          {if (true) return result;}
      break;
    case variable:
    case 71:
      result = variable();
          {if (true) return result;}
      break;
    case SUBTRACTION:
      jj_consume_token(SUBTRACTION);
                           result = token.image;
      arithTerm = arithTerm();
          {if (true) return result + arithTerm;}
      break;
    case 72:
      jj_consume_token(72);
      arithExpression = arithExpression();
      jj_consume_token(73);
          {if (true) return "("+arithExpression+")";}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	variable := [A − Z] ([0 − Z])∗ |“_”
*/
  final public String variable() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case variable:
      jj_consume_token(variable);
         {if (true) return token.image;}
      break;
    case 71:
      jj_consume_token(71);
               {if (true) return token.image;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	constant := numericConstant |stringConstant
*/
  final public String constant() throws ParseException {
  String result="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case stringConstant:
      result = stringConstant();
          {if (true) return result;}
      break;
    case numericConstant:
      result = numericConstant();
          {if (true) return result;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	numericConstant := [0 − 9]+
*/
  final public String numericConstant() throws ParseException {
    jj_consume_token(numericConstant);
                             {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

/**
	stringConstant := [a − z] ([0 − Z])∗
*/
  final public String stringConstant() throws ParseException {
    jj_consume_token(stringConstant);
                            {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

/**
	normContent ::=“[” (deontic |“ ”) “,” ( targetContent |“ ”) “,” (action |“ ”) “,” activation “,” expiration “]” | "_"
*/
/*
String normContent() throws THOMASException:{
  String result = "";
  String deonticString, targetContent, action, activation, expiration;}
{
	"["(< deontic >{deonticString = token.image;}|"_"{deonticString = token.image;})","(targetContent = targetContent()|"_"{targetContent = token.image;})","(action = action()|"_"{action = token.image;})","activation = activation()","expiration = expiration()"]"	{ return "["+deonticString+","+targetContent+","+action+","+activation+","+expiration+"]";	}
	| "_" {return token.image;}
	

}*/
/**
	OMSCondition ::= OMSUnitPred |OMSRolesPred |OMSNormsPred |OMSRoleEnactPred
*/
  final public String OMSCondition() throws ParseException, THOMASException {
String result = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case isUnit:
    case hasType:
    case hasParent:
      result = OMSUnitPred();
         {if (true) return result;}
      break;
    case isRole:
    case hasAccessibility:
    case hasVisibility:
    case hasPosition:
      result = OMSRolesPred();
         {if (true) return result;}
      break;
    case isNorm:
    case hasDeontic:
    case hasTarget:
    case hasAction:
      result = OMSNormsPred();
         {if (true) return result;}
      break;
    case isAgent:
    case playsRole:
    case roleCardinality:
    case positionCardinality:
      result = OMSRoleEnactPred();
         {if (true) return result;}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	OMSUnitPred ::= “isUnit” “(” term “)” |“hasType” “(” term “,” term “)” |“hasParent” “(” term “,” term “)”
*/
  final public String OMSUnitPred() throws ParseException {
        String result = "";
        String param1, param2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case isUnit:
      jj_consume_token(isUnit);
                   result = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(73);
         {if (true) return result = result + "("+param1+")";}
      break;
    case hasType:
      jj_consume_token(hasType);
                      result = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = OMSUnitTypesPred();
      jj_consume_token(73);
         {if (true) return result = result + "("+param1+","+param2+")";}
      break;
    case hasParent:
      jj_consume_token(hasParent);
                        result = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(73);
         {if (true) return result = result + "("+param1+","+param2+")";}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String OMSUnitTypesPred() throws ParseException {
  String result = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OMSUnitTypes:
      result = OMSUnitTypes();
                {if (true) return result;}
      break;
    case variable:
    case 71:
      result = variable();
          {if (true) return result;}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	“ isRole” “(” term “,” term “)” |“hasAccesibility” “(” term “,” term “,” term “)” |“hasVisibility” “(”
term “,” term “,” term “)” |“hasPosition” “(” term “,” term “,” term “)”
*/
  final public String OMSRolesPred() throws ParseException {
  String result = "";
  String param1, param2, param3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case isRole:
      jj_consume_token(isRole);
                   result = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(73);
         {if (true) return result = result + "("+param1+","+param2+")";}
      break;
    case hasAccessibility:
      jj_consume_token(hasAccessibility);
                               result = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = OMSAccessibilityPred();
      jj_consume_token(73);
         {if (true) return result = result + "("+param1+","+param2+","+param3+")";}
      break;
    case hasVisibility:
      jj_consume_token(hasVisibility);
                            result = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = OMSVisibilityPred();
      jj_consume_token(73);
         {if (true) return result = result + "("+param1+","+param2+","+param3+")";}
      break;
    case hasPosition:
      jj_consume_token(hasPosition);
                          result = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = OMSPositionsPred();
      jj_consume_token(73);
         {if (true) return result = result + "("+param1+","+param2+","+param3+")";}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String OMSAccessibilityPred() throws ParseException {
  String result = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OMSaccessibility:
      result = OMSaccessibility();
          {if (true) return result;}
      break;
    case variable:
    case 71:
      result = variable();
          {if (true) return result;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String OMSPositionsPred() throws ParseException {
  String result = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OMSPositions:
      result = OMSPositions();
          {if (true) return result;}
      break;
    case variable:
    case 71:
      result = variable();
          {if (true) return result;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String OMSVisibilityPred() throws ParseException {
  String result = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OMSVisibility:
      result = OMSVisibility();
          {if (true) return result;}
      break;
    case variable:
    case 71:
      result = variable();
          {if (true) return result;}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	“ isNorm” “(” term , term “)” |“hasDeontic” “(” term , term , term “)”
|  "hasTarget" "("term, term, term, term ")" | "hasAction" "("term, term, term")"
*/
  final public String OMSNormsPred() throws ParseException {
  String result="";
  String param1, param2, param3, param4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case isNorm:
      jj_consume_token(isNorm);
                    result = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(73);
                                                                                    {if (true) return result = result + "("+param1+","+ param2+")";}
      break;
    case hasDeontic:
      jj_consume_token(hasDeontic);
                           result = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = deonticPred();
      jj_consume_token(73);
         {if (true) return result = result + "("+param1+","+ param2+","+ param3+")";}
      break;
    case hasTarget:
      jj_consume_token(hasTarget);
                          result = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = targetTypePred();
      jj_consume_token(68);
      param4 = targetValuePred();
      jj_consume_token(73);
         {if (true) return result = result + "("+param1+","+ param2+","+ param3+","+param4+")";}
      break;
    case hasAction:
      jj_consume_token(hasAction);
                          result = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = OMSActionNamePred();
      jj_consume_token(73);
         {if (true) return result = result + "("+param1+","+ param2+","+ param3+")";}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	deonticContent := deontic | "_"
*/
  final public String deonticPred() throws ParseException {
  String result = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case deontic:
      jj_consume_token(deontic);
         {if (true) return token.image;}
      break;
    case variable:
    case 71:
      result = variable();
                       {if (true) return result;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	targetTypeName := targetType | "_"
*/
  final public String targetTypePred() throws ParseException {
  String result = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case roleName:
      jj_consume_token(roleName);
         {if (true) return token.image;}
      break;
    case agentName:
      jj_consume_token(agentName);
         {if (true) return token.image;}
      break;
    case positionName:
      jj_consume_token(positionName);
         {if (true) return token.image;}
      break;
    case variable:
    case 71:
      result = variable();
                       {if (true) return result;}
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	valueTypeName := OMSPositions |constant |variable
*/
  final public String targetValuePred() throws ParseException {
  String result = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OMSPositions:
      result = OMSPositions();
                                 {if (true) return result;}
      break;
    case numericConstant:
    case stringConstant:
      result = constant();
                      {if (true) return result;}
      break;
    case variable:
    case 71:
      result = variable();
                       {if (true) return result;}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String OMSActionNamePred() throws ParseException {
  String result = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case registerUnit:
    case deregisterUnit:
    case registerRole:
    case deregisterRole:
    case registerNorm:
    case deregisterNorm:
    case allocateRole:
    case deallocateRole:
    case joinUnit:
    case informAgentRole:
    case informMembers:
    case informQuantityMembers:
    case informUnit:
    case informUnitRoles:
    case informTargetNorms:
    case informRole:
    case informNorm:
    case acquireRole:
    case leaveRole:
      result = OMSActionName();
                                 {if (true) return result;}
      break;
    case variable:
    case 71:
      result = variable();
                       {if (true) return result;}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
OMSActionName ::= “registerUnit” |“deregisterUnit” |“registerRole” |“deregisterRole” |“registerNorm” |“deregisterNorm”
|“allocateRole” |“deallocateRole” |“joinUnit” |“informAgentRole” |“informMembers” |“informQuantityMembers”
|“informUnit” |“informUnitRoles” |“informTargetNorms” |“informRole” |“informNorm” |“acquireRole” |“leaveRole”

*/
  final public String OMSActionName() throws ParseException {
  String result = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case registerUnit:
      jj_consume_token(registerUnit);
                         {if (true) return token.image;}
      break;
    case deregisterUnit:
      jj_consume_token(deregisterUnit);
                      {if (true) return token.image;}
      break;
    case registerRole:
      jj_consume_token(registerRole);
                         {if (true) return token.image;}
      break;
    case deregisterRole:
      jj_consume_token(deregisterRole);
                           {if (true) return token.image;}
      break;
    case registerNorm:
      jj_consume_token(registerNorm);
                         {if (true) return token.image;}
      break;
    case deregisterNorm:
      jj_consume_token(deregisterNorm);
                           {if (true) return token.image;}
      break;
    case allocateRole:
      jj_consume_token(allocateRole);
                         {if (true) return token.image;}
      break;
    case deallocateRole:
      jj_consume_token(deallocateRole);
                           {if (true) return token.image;}
      break;
    case joinUnit:
      jj_consume_token(joinUnit);
                     {if (true) return token.image;}
      break;
    case informAgentRole:
      jj_consume_token(informAgentRole);
                            {if (true) return token.image;}
      break;
    case informMembers:
      jj_consume_token(informMembers);
                          {if (true) return token.image;}
      break;
    case informQuantityMembers:
      jj_consume_token(informQuantityMembers);
                                  {if (true) return token.image;}
      break;
    case informUnit:
      jj_consume_token(informUnit);
                        {if (true) return token.image;}
      break;
    case informUnitRoles:
      jj_consume_token(informUnitRoles);
                            {if (true) return token.image;}
      break;
    case informTargetNorms:
      jj_consume_token(informTargetNorms);
                              {if (true) return token.image;}
      break;
    case informRole:
      jj_consume_token(informRole);
                       {if (true) return token.image;}
      break;
    case informNorm:
      jj_consume_token(informNorm);
                       {if (true) return token.image;}
      break;
    case acquireRole:
      jj_consume_token(acquireRole);
                         {if (true) return token.image;}
      break;
    case leaveRole:
      jj_consume_token(leaveRole);
                       {if (true) return token.image;}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	“ isAgent” “(” term “)” |“playsRole” “(” term “,” term “,” term “)” |“roleCardinality” “(” term
“,” term “,” term “)” |“positionCardinality” “(” term “,” term “,” term “)”
*/
  final public String OMSRoleEnactPred() throws ParseException {
        String result = "";
        String param1 = "", param2 = "", param3 = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case isAgent:
      jj_consume_token(isAgent);
                    result = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(73);
                                                                 {if (true) return result = result +"("+param1+ ")";}
      break;
    case playsRole:
      jj_consume_token(playsRole);
                        result = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = term();
      jj_consume_token(73);
                                        {if (true) return result =  result +"("+param1+ ","+param2+ ","+param3+ ")";}
      break;
    case roleCardinality:
      jj_consume_token(roleCardinality);
                               result = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = numericConstantPred();
      jj_consume_token(73);
                                        {if (true) return result =  result +"("+param1+ ","+param2+ ","+param3+ ")";}
      break;
    case positionCardinality:
      jj_consume_token(positionCardinality);
                                   result = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = numericConstantPred();
      jj_consume_token(73);
                                        {if (true) return result =  result +"("+param1+ ","+param2+ ","+param3+ ")";}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
  numeriConstantPred::=numericConstant |variable

*/
  final public String numericConstantPred() throws ParseException {
  String result = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case numericConstant:
      result = numericConstant();
                                   {if (true) return result;}
      break;
    case variable:
    case 71:
      result = variable();
                      {if (true) return result;}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	OMSAction ::= “registerUnit” “(” term “,” term “,” term “,” term “,” term “)” |
“deregisterUnit” “(” term “,” term “)” |
“registerRole” “(” term “,” term “,” term “,” term “,” term “,” term “)” |
“deregisterRole” “(” term “,” term ”,” term “)” |
“registerNorm” “(” term “,” term “,” term "," term “)” |
“deregisterNorm” “(” term “,” term “,” term ”)” |
“allocateRole” “(” term “,” term “,” term “,” term “)” |
“deallocateRole” “(” term “,” term “,” term “,” term “)” |
“joinUnit” “(” term “,” term “,” term “)” |
“informAgentRole” “(” term “,” term “)” |

“informMembers” “(” term “,” term “,” term “,” term “)” |
“informQuantityMembers” “(” term “,” term “,” term “,” term “)” |
“informUnit” “(” term “,” term “)” |
“informUnitRoles” “(” term “,” term “)” |
“informTargetNorms” “(” term “,” term “,” term “,” term “)” |
“informRole” “(” term “,” term “,” term “)” |
“informNorm” “(” term “,” term “,” term “)” |
“acquireRole” “(” term “,” term “,” term “)” |
“leaveRole” “(” term “,” term “,” term “)” |
*/
  final public ArrayList<String> OMSAction() throws ParseException, THOMASException {
        String result= "";
        ArrayList<String > resultArray= new ArrayList<String >();
        String service, param1, param2, param3, param4, param5, param6, param7;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case registerUnit:
      try {
        jj_consume_token(registerUnit);
                                 service = token.image;
        jj_consume_token(72);
        param1 = term();
        jj_consume_token(68);
        param2 = OMSUnitTypesPred();
        jj_consume_token(68);
        param3 = term();
        jj_consume_token(68);
        param4 = term();
        jj_consume_token(68);
        param5 = term();
        jj_consume_token(73);
                  resultArray.add(service);
                  result = service +"("+ param1 + ","+ param2 + ","+ param3 + ","+ param4 + ","+ param5+ ")";
                  resultArray.add(result);
                  resultArray.add(param1);
                  resultArray.add(param2);
                  resultArray.add(param3);
                  resultArray.add(param4);
                  resultArray.add(param5);
                  {if (true) return resultArray;}
      } catch (ParseException pex) {
                System.out.println("----------------------------------");
        System.out.println("Invalid parameter "+getToken(0)+" in OMS action registerUnit");
                StringBuffer expected = new StringBuffer();
                for (int i = 0; i < pex.expectedTokenSequences.length; i++) {
                for (int j = 0; j < pex.expectedTokenSequences[i].length; j++) {
                        expected.append(tokenImage[pex.expectedTokenSequences[i][j]]).append(' ');
                }
        }

        System.out.println("Expected parameters: "+ expected.toString());
        System.out.println("----------------------------------");
                String message = l10n.getMessage(MessageID.NOT_CREATOR_IN_PARENT_UNIT, "");
                //throw new ParseException(message);
                {if (true) return null;}
      }
      break;
    case deregisterUnit:
      jj_consume_token(deregisterUnit);
                       service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2+ ")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        {if (true) return resultArray;}
      break;
    case registerRole:
      jj_consume_token(registerRole);
                         service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = OMSAccessibilityPred();
      jj_consume_token(68);
      param4 = OMSVisibilityPred();
      jj_consume_token(68);
      param5 = OMSPositionsPred();
      jj_consume_token(68);
      param6 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ","+ param3 + ","+ param4 + ","+ param5+"," + param6 +")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        resultArray.add(param3);
        resultArray.add(param4);
        resultArray.add(param5);
        resultArray.add(param6);
        {if (true) return resultArray;}
      break;
    case deregisterRole:
      jj_consume_token(deregisterRole);
                           service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ","+ param3 + ")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        resultArray.add(param3);
        {if (true) return resultArray;}
      break;
    case registerNorm:
      jj_consume_token(registerNorm);
                         service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = deonticPred();
      jj_consume_token(68);
      param4 = targetTypePred();
      jj_consume_token(68);
      param5 = targetValuePred();
      jj_consume_token(68);
      param6 = OMSActionNamePred();
      jj_consume_token(68);
      param7 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ","+ param3 +","+param4+")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        resultArray.add(param3);
        resultArray.add(param4);
        resultArray.add(param5);
        resultArray.add(param6);
        resultArray.add(param7);

        {if (true) return resultArray;}
      break;
    case deregisterNorm:
      jj_consume_token(deregisterNorm);
                           service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ","+ param3 + ")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        resultArray.add(param3);
        {if (true) return resultArray;}
      break;
    case allocateRole:
      jj_consume_token(allocateRole);
                         service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = term();
      jj_consume_token(68);
      param4 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ","+ param3 + ","+ param4 + ")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        resultArray.add(param3);
        resultArray.add(param4);
        {if (true) return resultArray;}
      break;
    case deallocateRole:
      jj_consume_token(deallocateRole);
                           service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = term();
      jj_consume_token(68);
      param4 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ","+ param3 + ","+ param4 + ")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        resultArray.add(param3);
        resultArray.add(param4);
        {if (true) return resultArray;}
      break;
    case joinUnit:
      jj_consume_token(joinUnit);
                     service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ","+ param3 + ")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        resultArray.add(param3);
        {if (true) return resultArray;}
      break;
    case informAgentRole:
      jj_consume_token(informAgentRole);
                            service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        {if (true) return resultArray;}
      break;
    case informMembers:
      jj_consume_token(informMembers);
                          service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = OMSPositionsPred();
      jj_consume_token(68);
      param4 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ","+ param3 + ","+ param4  +")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        resultArray.add(param3);
        resultArray.add(param4);
        {if (true) return resultArray;}
      break;
    case informQuantityMembers:
      jj_consume_token(informQuantityMembers);
                                  service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = OMSPositionsPred();
      jj_consume_token(68);
      param4 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ","+ param3 + ","+ param4 + ")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        resultArray.add(param3);
        resultArray.add(param4);
        {if (true) return resultArray;}
      break;
    case informUnit:
      jj_consume_token(informUnit);
                        service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        {if (true) return resultArray;}
      break;
    case informUnitRoles:
      jj_consume_token(informUnitRoles);
                            service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        {if (true) return resultArray;}
      break;
    case informTargetNorms:
      jj_consume_token(informTargetNorms);
                              service = token.image;
      jj_consume_token(72);
      param1 = targetTypePred();
      jj_consume_token(68);
      param2 = targetValuePred();
      jj_consume_token(68);
      param3 = term();
      jj_consume_token(68);
      param4 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ","+ param3 + ","+ param4 + ")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        resultArray.add(param3);
        resultArray.add(param4);
        {if (true) return resultArray;}
      break;
    case informRole:
      jj_consume_token(informRole);
                       service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ","+ param3 + ")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        resultArray.add(param3);
        {if (true) return resultArray;}
      break;
    case informNorm:
      jj_consume_token(informNorm);
                       service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ","+ param3 +  ")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        resultArray.add(param3);
        {if (true) return resultArray;}
      break;
    case acquireRole:
      jj_consume_token(acquireRole);
                         service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ","+ param3 + ")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        resultArray.add(param3);
        {if (true) return resultArray;}
      break;
    case leaveRole:
      jj_consume_token(leaveRole);
                       service = token.image;
      jj_consume_token(72);
      param1 = term();
      jj_consume_token(68);
      param2 = term();
      jj_consume_token(68);
      param3 = term();
      jj_consume_token(73);
        resultArray.add(service);
        result = service +"("+ param1 + ","+ param2 + ","+ param3 + ")";
        resultArray.add(result);
        resultArray.add(param1);
        resultArray.add(param2);
        resultArray.add(param3);
        {if (true) return resultArray;}
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	OMSConstants ::= OMSPositions |OMSAccesibility |OMSVisibility |OMSUnitTypes 
*/
  final public String OMSConstants() throws ParseException {
  String result = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OMSPositions:
      /* OMSPositions() | OMSaccessibility() | OMSVisibility() |  OMSUnitTypes() | < virtual > | < participant >*/
      
                result = OMSPositions();
                                    {if (true) return result;}
      break;
    case OMSaccessibility:
      result = OMSaccessibility();
                                          {if (true) return result;}
      break;
    case OMSVisibility:
      result = OMSVisibility();
                                       {if (true) return result;}
      break;
    case OMSUnitTypes:
      result = OMSUnitTypes();
                                      {if (true) return result;}
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
	OMSPositions ::= “creator” |“member” |“supervisor” |“subordinate”
*/
  final public String OMSPositions() throws ParseException {
   String variable="";
    jj_consume_token(OMSPositions);
          {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

/**
	OMSAccesibility ::= “external” |“internal”
*/
  final public String OMSaccessibility() throws ParseException {
   String variable="";
    jj_consume_token(OMSaccessibility);
          {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

/**
	OMSVisibility ::= “public” |“private”
*/
  final public String OMSVisibility() throws ParseException {
   String variable="";
    jj_consume_token(OMSVisibility);
          {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

/**
	OMSUnitTypes ::= “ﬂat” |“team” |“hierarchy”
*/
  final public String OMSUnitTypes() throws ParseException {
  String variable="";
    try {
      jj_consume_token(OMSUnitTypes);
          {if (true) return token.image;}
    } catch (ParseException pex) {
        System.out.println("Unit type not found: "+ getNextToken());
        {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(isUnit)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(71)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(MULTIPLICATION)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(71)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(NOTEQUAL)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(stringConstant)) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(roleName)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(numericConstant)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(SUBTRACTION)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(LESS)) return true;
    if (jj_scan_token(positionName)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(71)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(variable)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_10()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    }
    }
    }
    }
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_scan_token(agentName)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(SUBTRACTION)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(LESS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(HIGHER)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(positionCardinality)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(roleCardinality)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(playsRole)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(isAgent)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(leaveRole)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(acquireRole)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(informNorm)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(informRole)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(informTargetNorms)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(informUnitRoles)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(informUnit)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_17()) return true;
    Token xsp;
    if (jj_3R_18()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(informQuantityMembers)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(informMembers)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(informAgentRole)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(joinUnit)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(deallocateRole)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(allocateRole)) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(deregisterNorm)) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(registerNorm)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(deregisterRole)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(registerRole)) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(registerUnit)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(deregisterUnit)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(OMSUnitTypes)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(OMSVisibility)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(OMSaccessibility)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(positionName)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(OMSPositions)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(agentName)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(roleName)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_6()) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(MODULE)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(deontic)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(68)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(hasAction)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(hasTarget)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(hasDeontic)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(isNorm)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(INTDIVISION)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(DIVISION)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(hasPosition)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(hasVisibility)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_92()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(hasAccessibility)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(HIGHEROREQUAL)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(isRole)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(POWER)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(LESSOREQUAL)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(hasParent)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(hasType)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(68)) return true;
    if (jj_3R_90()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public NormParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[38];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xc0,0x0,0x0,0x80800,0x80800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x600,0x3f000,0x3f000,0x1fc0000,0x1fc0000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x1c0,0x0,0xfe000000,0xfe000000,0x0,0x0,0xfe000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x80000000,0x1000,0xfffff000,0xfffff000,0x0,0x7ffff000,0x0,0xf000,0xf000,0x0,0x8000f000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x80000000,0x7fff0000,0x70000,0x8000,0x780000,0x2000,0x1000,0x4000,0x7800000,0x0,0x0,0x80001000,0xfff,0xfff,0x78000000,0x80000000,0xfff,0xf000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x82,0x80,0x183,0x183,0x82,0x83,0x100,0x83,0x2,0x10,0x83,0x100,0x0,0x0,0x0,0x0,0x0,0x181,0x81,0x2,0x0,0x0,0x81,0x0,0x81,0x81,0x81,0x0,0x81,0x81,0x83,0x81,0x0,0x0,0x81,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[9];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public NormParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NormParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NormParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public NormParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NormParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public NormParser(NormParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(NormParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 38; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[74];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 38; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 74; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
