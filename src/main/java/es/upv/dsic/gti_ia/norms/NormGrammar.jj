/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options{  JDK_VERSION = "1.5";  static = false;
 //CHOICE_AMBIGUITY_CHECK = 4;
  DEBUG_PARSER = true;
 // FORCE_LA_CHECK = true;
 // LOOKAHEAD = 2;
 }PARSER_BEGIN(Norms)package es.upv.dsic.gti_ia.norms;

import es.upv.dsic.gti_ia.organization.exception.THOMASMessages.MessageID;
import es.upv.dsic.gti_ia.organization.exception.InvalidParametersException;
import es.upv.dsic.gti_ia.organization.exception.THOMASMessages;
import es.upv.dsic.gti_ia.organization.exception.NotCreatorInParentUnitException;
import es.upv.dsic.gti_ia.organization.exception.THOMASException;


public class Norms{

private THOMASMessages    l10n;

	public void parser() throws THOMASException, Exception, Error
	{
	  l10n = new THOMASMessages();
	  
        switch (this.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
   }

}

  /*  public static void main(String args []) throws ParseException  {    Norms parser = new Norms(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an norm expression :");      try      {        switch (Norms.one_line())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        Norms.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }*/PARSER_END(Norms)SKIP :{
  " "|  "\r"| "\t"| "\n"}
TOKEN : /* OPERATORS */{

  
   			< deontic: "o" | "f" | "p" >
| 	< targetType: "agentName" | "roleName" | "positionName" >
|  	< AND: "&" >
| 	< OR: "||" >
| 	< NOT:	"not" >
| 	< NOTEQUAL:	"!=" >
| 	< EQUAL:	"==" >
| 	< LESS:	"<" >
| 	< LESSOREQUAL: "<=" >
| 	< HIGHER:	">" >
| 	< HIGHEROREQUAL:	">=" >
| 	< SUM:	"+" >
| 	< SUBTRACTION:	"-" >
| 	< MULTIPLICATION:	"*" >
| 	< POWER:	"**" >
| 	< DIVISION:	"/" >
| 	< INTDIVISION:	"div" >
| 	< MODULE:	"mod" >
| 	< registerUnit: 	"registerUnit" >
| 	< deregisterUnit: 	"deregisterUnit" >
| 	< registerRole: 	"registerRole" >
| 	< deregisterRole:	"deregisterRole" >
| 	< registerNorm:	"registerNorm" >
| 	< deregisterNorm:	"deregisterNorm" >
| 	< allocateRole:	"allocateRole" >
| 	< deallocateRole:	"deallocateRole" >
| 	< joinUnit:	"joinUnit" >
| 	< informAgentRole:	"informAgentRole" >
| 	< informMembers:	"informMembers" >
| 	< informQuantityMembers:	"informQuantityMembers" >
| 	< informUnit:	"informUnit" >
| 	< informUnitRoles:	"informUnitRoles" >
| 	< informTargetNorms:	"informTargetNorms" >
| 	< informRole:	"informRole" >
| 	< informNorm:	"informNorm" >
| 	< acquireRole: "acquireRole" >
| 	< leaveRole:	"leaveRole" >
/*
| 	<  virtual: "virtual" >
| 	<  participant: "participant" >
/*
| 	< OMSPositions: "creator" | "member" | "supervisor" | "subordinate">
| 	< OMSaccessibility: "external" | "internal" >
| 	< OMSVisibility:	"public" | "private" >
| 	< OMSUnitTypes:	"flat" | "team" | "hierarchy" >*/

/*
| 	< CREATOR: "creator" >
| 	< member: "member" >
| 	< supervisor: "supervisor" >
| 	< subordinate: "subordinate">
| 	< external: "external" >
| 	< internal: "internal" >
| 	< PRIVATE: "private" >
| 	< PUBLIC: "public" >
| 	< flat: "flat" >
| 	< team: "team" >
| 	< hierarchy: "hierarchy" >*/

| 	< isUnit:	"isUnit" >
| 	< hasType:	"hasType" >
| 	< hasParent:	"hasParent" > 
| 	< isRole:	"isRole" >
| 	< hasAccessibility:	"hasAccessibility" >
| 	< hasVisibility:	"hasVisibility" >
| 	< hasPosition:	"hasPosition" >
| 	< isNorm:	"isNorm" >
| 	< hasContent:	"hasContent" >  
| 	< isAgent:	"isAgent" >
| 	< playsRole:	"playsRole" >
| 	< roleCardinality:	"roleCardinality" > 
| 	< positionCardinality:	"positionCardinality" >
| 	< numericConstant:  (["0"-"9"])+ >
|   < variable:  ["A"-"Z"](["a"-"z","A"-"Z","_","0"-"9"])* >
|   < stringConstant:  ["a"-"z"](["a"-"z","A"-"Z","_","0"-"9"])* >}int one_line() throws THOMASException:{}{  norm() ";"  {    return 0;  }| ";"  {    return 1;  }}void norm() throws THOMASException: {}{
  "@"id()"["deontic()","target()","action()","activation()","expiration()"]"  }

void id():{}
{	 stringConstant()
}

void deontic():{}
{
   < deontic >	
}

void target() :
{
  }
{	"<" targetType() ":"  value()  ">"
}

void targetContent():
{
}
{	"<" targetType() ":"  (value() | variable()) ">"
}
void activation() throws THOMASException: {}
{
  LOOKAHEAD(2)
	expression()
| "_"
|	{}
}

void expiration()throws THOMASException :
{
}
{
   LOOKAHEAD(2)
	expression()
|  "_"
|	{} 
	
}

void targetType():{}
{	  < targetType >

}

void value():{}
{	 stringConstant()
}

void genAtomicCondition() throws THOMASException: {
   
 }
{

	OMSCondition() | genAtomicFormula()
}

void genAtomicFormula() : {
 
 }
{
	//(atom()| variable())["(" listOfTerms() ")"]
	
	stringConstant()["(" listOfTerms() ")"]|variable()|OMSConstants()
	  
}

void action() throws THOMASException: {}
{	OMSAction() /*| genActionFormula()*/
}

void atom():{}
{ 		OMSConstants() | stringConstant() 

}

void listOfTerms() : {}
{
	term()(","term())*
}

void term():{}
{   constant() | variable() | OMSConstants()
}

void expression() throws THOMASException: {
  }
{
  	LOOKAHEAD(2)
	simpleExpression() expressionRest() | < NOT > expression() expressionRest() |  "("expression()")" expressionRest()

}

void expressionRest() throws THOMASException:
{
}
{
	
	 < AND > expression()
	| < OR > expression()
	|  {}

}

void simpleExpression() throws THOMASException:
{

  }
{
	LOOKAHEAD(relExpression())
    relExpression()
  | 
  	LOOKAHEAD(genAtomicCondition())
	genAtomicCondition()
	
}


void relExpression() throws THOMASException:
{
 
}
{

	relTerm()((< LESS >| < HIGHER > | < EQUAL >| < NOTEQUAL >| < LESSOREQUAL >|< HIGHEROREQUAL >)relTerm())+
}

void relTerm() throws THOMASException:
{
  
}
{


  LOOKAHEAD(arithExpression())
   arithExpression()  
|
LOOKAHEAD(genAtomicFormula())
  genAtomicFormula()  

}

void arithExpression() :
{
   
}
{
	arithTerm()((< SUM >|< SUBTRACTION >|< MULTIPLICATION > | < POWER >|< DIVISION >|< INTDIVISION >|< MODULE >)arithTerm())*

}

void arithTerm():
{
   
}
{

	 numericConstant() | variable() | < SUBTRACTION > arithTerm() | "(" arithExpression() ")"

}

void variable():{
  }
{ 	< variable > | "_"

}

void constant():{}
{
 	 stringConstant() |  numericConstant() 
}

void numericConstant():{
   }
{
 	 < numericConstant >
}

void stringConstant():{}
{
 	< stringConstant >

}

void normContent() throws THOMASException:{
  }
{
	"["(< deontic >|"_")","(targetContent()|"_")","(action()|"_")","activation()","expiration()"]" | "_"

}

void OMSCondition() throws THOMASException: {}
{
	OMSUnitPred() | OMSRolesPred() | OMSNormsPred() | OMSRoleEnactPred()

}

void OMSUnitPred() : {}
{
	< isUnit > "("term()")" | < hasType > "("term()","term()")" | < hasParent > "(" term()","term()")"

}

void OMSRolesPred() throws THOMASException: {
 }
{
  try
  {    
	< isRole > "("term()","term()")" | < hasAccessibility > "("term()","term()"," term()")" | < hasVisibility > "(" term()","term()"," term()")"
	| < hasPosition > "(" term()","term()","term()")"
  }catch(Exception e)
  {
		//String message = l10n.getMessage(MessageID.NOT_CREATOR_IN_PARENT_UNIT, "");
		throw new NotCreatorInParentUnitException(e.getMessage());
  }
}

void OMSNormsPred() throws THOMASException: {}
{
	< isNorm > "("term()","term()")" | < hasContent > "("term()","term() "," normContent()")" 
}

void OMSRoleEnactPred() :
{}
{
	< isAgent > "("term()")" | < playsRole > "("term()","term()","term()")" | < roleCardinality > "(" term()","term()","term()")"
	| < positionCardinality > "(" term()","term()","term()")"
}


void OMSAction() throws THOMASException : {}
{ 
 try
  {
	registerUnit()	//< registerUnit > "("term()","term()","term()","term()","term()")"
|   < deregisterUnit > "("term()","term()")"
| 	< registerRole > "("term()","term()","term()","term()","term()","term()")"
| 	< deregisterRole > "("term()","term()","term()")"
| 	< registerNorm >	"("term()","term()","term()","term()")"
| 	< deregisterNorm > "("term()","term()","term()")"
| 	< allocateRole > "("term()","term()","term()","term()")"
| 	< deallocateRole > "("term()","term()","term()","term()")"
| 	< joinUnit >	"("term()","term()","term()")"
| 	< informAgentRole > "(" term()","term()")"
| 	< informMembers > "("term()","term()","term()","term()")"
| 	< informQuantityMembers > "("term()","term()","term()","term()")"
| 	< informUnit > "("term()","term()")"
| 	< informUnitRoles > "("term()","term()")"
| 	< informTargetNorms > "("term()","term()","term()","term()")"
| 	< informRole > "("term()","term()","term()")"
| 	< informNorm > "("term()","term()","term()")"
| 	< acquireRole > "("term()","term()","term()")"
| 	< leaveRole > "("term()","term()","term()")"

  }catch(ParseException e)
  {
    	System.out.println("----------Current token-----------");
    	System.out.println("Current token: "+ e.currentToken);
    	System.out.println("Current token begin line: "+ e.currentToken.beginLine);
    	System.out.println("Current token begin column: "+ e.currentToken.beginColumn);
		System.out.println("Current token end line: "+ e.currentToken.endLine);
    	System.out.println("Current token end column: "+ e.currentToken.endColumn);
    	
    	
    	System.out.println("----------------------------------");
    	System.out.println("Excepted tokens: "+ e.expectedTokenSequences[0][0]);
    	System.out.println("----ERROR----: "+ e.getMessage());
		String message = l10n.getMessage(MessageID.NOT_CREATOR_IN_PARENT_UNIT, "");
		throw new NotCreatorInParentUnitException(message);

  }
}

void registerUnit():
{}
{	< registerUnit > "("term()","term()","term()","term()","term()")"

}

void OMSConstants():{}
{ 	/* OMSPositions() | OMSaccessibility() | OMSVisibility() |  OMSUnitTypes() | < virtual > | < participant >*/
 	 OMSPositions() | OMSaccessibility() | OMSVisibility() |  OMSUnitTypes() | " virtual " | " participant "

}

void OMSPositions():{}
{
	//< CREATOR > | < member > | < supervisor > | < subordinate >
	"creator" | "member" | "supervisor" | "subordinate"
 	}

void OMSaccessibility():{}
{
 	// < external > | < internal >
	 "external" | "internal"
 	 
} 
void OMSVisibility():{}
{ 	 
	//< PUBLIC > | < PRIVATE  >
	 "public" | "private"

}
void OMSUnitTypes():{}
{
 	//< flat > | < team > | < hierarchy >
 	"flat" | "team" | "hierarchy"

}

/*void genActionFormula() :{}*/
