/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */

options{  JDK_VERSION = "1.5";  static = false;
 //CHOICE_AMBIGUITY_CHECK = 4;
 // DEBUG_PARSER = true;
 // FORCE_LA_CHECK = true;
 // LOOKAHEAD = 2;
 }PARSER_BEGIN(NormParser)package es.upv.dsic.gti_ia.norms;


import es.upv.dsic.gti_ia.organization.exception.THOMASMessages.MessageID;
import es.upv.dsic.gti_ia.organization.exception.InvalidIDException;
import es.upv.dsic.gti_ia.organization.exception.InvalidDeonticException;
import es.upv.dsic.gti_ia.organization.exception.InvalidTargetTypeException;
import es.upv.dsic.gti_ia.organization.exception.InvalidTargetValueException;
import es.upv.dsic.gti_ia.organization.exception.InvalidOMSActionException;
import es.upv.dsic.gti_ia.organization.exception.InvalidExpressionException;
import es.upv.dsic.gti_ia.organization.exception.THOMASMessages;
import es.upv.dsic.gti_ia.organization.exception.NotCreatorInParentUnitException;
import es.upv.dsic.gti_ia.organization.exception.THOMASException;
import java.util.ArrayList;


public class NormParser{

private THOMASMessages    l10n;

	public Norm parser() throws THOMASException, Exception, Error
	{
	  try
	  {	    
	  l10n = new THOMASMessages();

	  return norm();
	  }
	  catch(TokenMgrError err)
      {
		 String message = l10n.getMessage(MessageID.INVALID_EXPRESSION, err.getMessage());
		 throw new InvalidExpressionException(message);
       }
   }

}PARSER_END(NormParser)SKIP :{
  " "|  "\r"| "\t"| "\n"}
TOKEN : /* OPERATORS */{

  
   			< deontic: "o" | "f" | "p" >
//| 	< targetType: "agentName" | "roleName" | "positionName" >
|	< agentName: "agentName" >
|	< roleName: "roleName" >
|	< positionName: "positionName" >
|  	< AND: "&" >
| 	< OR: "|" >
| 	< NOT:	"not" >
| 	< NOTEQUAL:	"\\==" >
| 	< EQUAL:	"==" >
| 	< LESS:	"<" >
| 	< LESSOREQUAL: "<=" >
| 	< HIGHER:	">" >
| 	< HIGHEROREQUAL:	">=" >
| 	< SUM:	"+" >
| 	< SUBTRACTION:	"-" >
| 	< MULTIPLICATION:	"*" >
| 	< POWER:	"**" >
| 	< DIVISION:	"/" >
| 	< INTDIVISION:	"div" >
| 	< MODULE:	"mod" >
| 	< registerUnit: 	"registerUnit" >
| 	< deregisterUnit: 	"deregisterUnit" >
| 	< registerRole: 	"registerRole" >
| 	< deregisterRole:	"deregisterRole" >
| 	< registerNorm:	"registerNorm" >
| 	< deregisterNorm:	"deregisterNorm" >
| 	< allocateRole:	"allocateRole" >
| 	< deallocateRole:	"deallocateRole" >
| 	< joinUnit:	"joinUnit" >
| 	< informAgentRole:	"informAgentRole" >
| 	< informMembers:	"informMembers" >
| 	< informQuantityMembers:	"informQuantityMembers" >
| 	< informUnit:	"informUnit" >
| 	< informUnitRoles:	"informUnitRoles" >
| 	< informTargetNorms:	"informTargetNorms" >
| 	< informRole:	"informRole" >
| 	< informNorm:	"informNorm" >
| 	< acquireRole: "acquireRole" >
| 	< leaveRole:	"leaveRole" >
//| 	<  virtual: "virtual" >
//| 	<  participant: "participant" >
| 	< OMSPositions: "creator" | "member" | "supervisor" | "subordinate">
| 	< OMSaccessibility: "external" | "internal" >
| 	< OMSVisibility:	"public" | "private" >
| 	< OMSUnitTypes:	"flat" | "team" | "hierarchy" >

/*
| 	< CREATOR: "creator" >
| 	< member: "member" >
| 	< supervisor: "supervisor" >
| 	< subordinate: "subordinate">
| 	< external: "external" >
| 	< internal: "internal" >
| 	< PRIVATE: "private" >
| 	< PUBLIC: "public" >
| 	< flat: "flat" >
| 	< team: "team" >
| 	< hierarchy: "hierarchy" >*/

| 	< isUnit:	"isUnit" >
| 	< hasType:	"hasType" >
| 	< hasParent:	"hasParent" > 
| 	< isRole:	"isRole" >
| 	< hasAccessibility:	"hasAccessibility" >
| 	< hasVisibility:	"hasVisibility" >
| 	< hasPosition:	"hasPosition" >
| 	< isNorm:	"isNorm" >
| 	< hasDeontic:	"hasDeontic" >
| 	< hasTarget:	"hasTarget" >
| 	< hasAction:	"hasAction" >
| 	< isAgent:	"isAgent" >
| 	< playsRole:	"playsRole" >
| 	< roleCardinality:	"roleCardinality" > 
| 	< positionCardinality:	"positionCardinality" >
| 	< numericConstant:  (["0"-"9"])+ >
|   < variable:  ["A"-"Z"](["a"-"z","A"-"Z","_","0"-"9"])* >
|   < stringConstant:  ["a"-"z"](["a"-"z","A"-"Z","_","0"-"9"])* >}
 /**
 norm ::= "@"id"["deontinc","target","action","activation","expiration"]"
 */Norm norm() throws InvalidIDException, Exception: {
	Norm norm = null;
	String id, deontic, target, activation, expiration;
	ArrayList<String > targetArray = new ArrayList<String >();
	ArrayList<String > action = new ArrayList<String >();
	ArrayList<String > actionParameters = new ArrayList<String >();

	}	{

    try
    {      
  		"@"id = id()"["deontic = deontic()","targetArray = target()","action = action()","activation = activation()","expiration = expiration()"]"  	{

		
  	    norm = new Norm(id,deontic,targetArray.get(0), targetArray.get(1),action,activation,expiration);
  		return norm;
  	}
 	}
  	catch(ParseException pex)
  	{

		
  	    String message = l10n.getMessage(MessageID.INVALID_EXPRESSION,  pex.currentToken.next.beginColumn, getToken(0)+" "+getToken(1)+" "+getToken(2));
		throw new InvalidExpressionException(message);
  	  
    }catch(TokenMgrError err)
    {		 String message = l10n.getMessage(MessageID.INVALID_EXPRESSION, err.getMessage());
		 throw new InvalidExpressionException(message);
  	   
	
    }
    
 
 }

/**
	id ::= stringConstant
*/
String id() throws THOMASException:{
	String id ="";}
{
 	try
  	{    		 id = stringConstant(){return id;}
  	}catch(ParseException e)
  	{	
		
		String message = l10n.getMessage(MessageID.INVALID_ID, e.currentToken.next.beginLine, e.currentToken.next.beginColumn, getNextToken());
		throw new InvalidIDException(message);
	
  	}
}

/**
	deontinc ::= "o"|"f"|"p"
*/
String deontic() throws THOMASException:{}
{
 	try
  	{    
   		< deontic >{return token.image;}
 	}catch(ParseException e)
 	{
		
		String message = l10n.getMessage(MessageID.INVALID_DEONTIC, e.currentToken.next.beginLine, e.currentToken.next.beginColumn, getNextToken());
		throw new InvalidDeonticException(message);
 	}
   	
}

/**
	target ::= "< "targetType ":" value " >"
*/
/*
String target() :
{
  String targetType = "";
  String value = "";
  }
{	"<" targetType = targetType() ":"  value = value()  ">"
	{return "< " + targetType + ":" + value + " >";}
}

*/
ArrayList<String > target() throws THOMASException:
{
  String targetType = "";
  String value = "";
  ArrayList<String > target = new ArrayList<String >();}
{

  	try
  	{
 		LOOKAHEAD(2)
		"<"
		(< agentName >{targetType = token.image;} | < roleName >{targetType = token.image;})
   		":"
  	
  		try
  		{    
  			(value = constant() | "_" {value = token.image;})
  	
  		}catch(ParseException pex)
  		{
			String message = l10n.getMessage(MessageID.INVALID_TARGET_VALUE,  pex.currentToken.next.beginColumn,  getToken(1));
			throw new InvalidTargetValueException(message);
  		}
  
 		">"
		{
		target.add(targetType);
	  	target.add(value);
	  	return target;}//"< " + targetType + ":" + value + " >";}
		|

  
		LOOKAHEAD(2)
		"<"
  		< positionName >{targetType = token.image;}
		":"
  		try
  		{    
  			(value = OMSPositions() | "_" {value = token.image;})  ">"

  		}catch(ParseException pex)
  		{
			String message = l10n.getMessage(MessageID.INVALID_TARGET_VALUE,  pex.currentToken.next.beginColumn, getToken(1));
			throw new InvalidTargetValueException(message);
  		}
		{
     		target.add(targetType);
	  		target.add(value);
	  		return target;		}
	}catch(ParseException pex)
  	{
		String message = l10n.getMessage(MessageID.INVALID_TARGET_TYPE,  pex.currentToken.next.beginColumn, getToken(2));
		throw new InvalidTargetTypeException(message);
  	}	
}




/*
/**
 	targetContent ::= "<" targetType() ":"  (value() | variable()) ">"
 */
/*
String targeContent():
{
  String targetTypeResult="";
  String valueResult = "";
  String variableResult = "";
}
{	"<" targetTypeResult = targetType() ":"  ( valueResult = value() | variableResult = variable()) ">"
	{return "<"+ targetTypeResult + ":" + valueResult + ""+ variableResult + " >"; }
	
	
}
*/
/**
	activation ::= expression | "_"
*/
String activation() throws THOMASException: {
  String expression;
  }
{
  	LOOKAHEAD(2)
  	 "_" { return "";}
| expression = expression(){ return expression;}
|	{} { return "";}
}

/**
	expiration := expression |“_”
*/
String expiration()throws THOMASException :
{
  String result = "";
}
{
   
   LOOKAHEAD(2)
   "_"{return "";}
| 	result = expression(){return result;}
| {} {return "";}
  	
	
}
/**
	targetType := “agentName” |“roleName” |“positionName”
*/
/*
String targetType():{
  String result = "";}
{	  < targetType >{return token.image;}
	  

}*/
/**
	value := stringConstant | "_"
*/
String value():{
  String result;}
{	 result = stringConstant()
	 {return result;}
	| "_" {return token.image;}	   
}
/**
	genAtomicCondition ::= OMSCondition |genAtomicFormula
*/
String genAtomicCondition() throws THOMASException: {
   String result="";
 }
{

	result = OMSCondition()	{return result;}
	|result = genAtomicFormula()
	{return result;}
}
/**
	genAtomicFormula ::= stringConstant [ “(” listOfTerms “)”] |variable |OMSConstants
*/
String genAtomicFormula() : {
  String stringConstantResult = "";
  String listOfTermsResult = "";
  String variableResult= "";
  String OMSConstantsResult = "";
  String op1 = "";
  String op2 = "";
 }
{
	//(atom()| variable())["(" listOfTerms() ")"]
	  
	stringConstantResult = stringConstant()["("{op1 = token.image;} listOfTermsResult = listOfTerms() ")"{op2 = token.image;}]
	{return stringConstantResult + op1 + listOfTermsResult + op2;}
	|variableResult = variable()
	{return variableResult;}
	|OMSConstantsResult = OMSConstants()
	{return OMSConstantsResult;}

	  
}
/**
	action := OMSAction |genActionFormula
*/
ArrayList<String > action() throws THOMASException: {
  ArrayList<String > result = new ArrayList<String >();
  String t = token.image;
  }
{
 	try
 	{ 	  	result = OMSAction() /*| genActionFormula()*/
	{
	  return result;}

	}catch(ParseException pex)
	{		
		StringBuffer expected = new StringBuffer();
		for (int i = 0; i < pex.expectedTokenSequences.length; i++) {
    		for (int j = 0; j < pex.expectedTokenSequences[i].length; j++) {
          		expected.append(tokenImage[pex.expectedTokenSequences[i][j]]).append(' ');
        	}
      	}

		String message = l10n.getMessage(MessageID.INVALID_OMS_ACTION,  pex.currentToken.next.beginColumn, getNextToken(), expected.toString());
		throw new InvalidOMSActionException(message);
      	
	
	}


}
/**
	atom ::= OMSConstants | stringConstant
*/
String atom():{
  String result = "";}
{ 		result = OMSConstants()
 		{ return result;} 
 		| result = stringConstant()
 		{return result;} 
 		   

}
/**
	listOfTerms := term [ “,” term ] ∗
*/
String listOfTerms() : {
	String term;
	String term1 = "";
	String coma = "";
  }
{
	term = term()(","{coma = token.image;} term1 = term())*
	{return term + coma + term1;}
}
/**
	term := constant |variable |OMSConstants
*/
String term():{
  String term="";
  String constantString = "";
  String variableString = "";
  String OMSConstantsString = "";}
{   constantString = constant(){return constantString;}
   | variableString = variable() {return variableString;}
   | OMSConstantsString = OMSConstants() {return OMSConstantsString;}
}
/**
	expression := simpleExpression |“not” expression |expression “&” expression |expression “||”’ expression |“(” expression
“)”
*/
String expression()  throws THOMASException: {
  String result="";
  String simpleExpression = "";
  String expressionRest = "";
  String operator = "";
  String expression = "";
  }
{
  try
  {    
  	LOOKAHEAD(2)
	simpleExpression = simpleExpression() expressionRest = expressionRest()
	{return simpleExpression + " " + expressionRest;}
	| < NOT > expression = expression() expressionRest = expressionRest()
	{return operator +" " + expression + " " + expressionRest;}
	|  "(" expression = expression()")" expressionRest = expressionRest()
	{return "(" + expression + ")" + " " + expressionRest;}
 }
 catch(ParseException pex)
 {		
      	String message = l10n.getMessage(MessageID.INVALID_EXPRESSION,  pex.currentToken.next.beginColumn, getNextToken());
		throw new InvalidExpressionException(message);
	
 }

}
/**
	expressionRest ::= "and" expression() | "or" expression() | vacio
*/
String expressionRest() throws THOMASException:
{
  String result="";
  String operator = "";
}
{
	try
	{	  
	 < AND >{operator = token.image;}	    result = expression()
	    {return  operator + " "+  result;}    
	| < OR >{operator = token.image;}
	    result = expression()
	    {return  operator + " " + result;}
	|  {}	{return "";}

	 }
 catch(ParseException pex)
 {
		
      	String message = l10n.getMessage(MessageID.INVALID_EXPRESSION,  pex.currentToken.next.beginColumn, getNextToken());
		throw new InvalidExpressionException(message);
	
 }

}
/**
	simpleExpression := genAtomicCondition |relExpression
*/
String simpleExpression() throws THOMASException:
{
String result = "";
  }
{
	LOOKAHEAD(relExpression())
    result = relExpression()
    {return result;}      
  | 
  	LOOKAHEAD(genAtomicCondition())
	result = genAtomicCondition()
	{return result;}
	
}

/**
	relExpression := relTerm [ ( “ < ” |“ > ” |“==” |“! =” “ <= ” |“ >= ” ) relTerm ]+
*/
String relExpression() throws THOMASException:
{
 String relTerm1, relTerm2, operator;
}
{
	  
	relTerm1 = relTerm()((< LESS >{operator = token.image;}| < HIGHER > {operator = token.image;}| < EQUAL >{operator = token.image;}| < NOTEQUAL >{operator = token.image;}| < LESSOREQUAL >{operator = token.image;}|< HIGHEROREQUAL >{operator = token.image;}) relTerm2 = relTerm())+
	{return relTerm1 + operator + relTerm2;}


	  
}
/**
	relTerm := genAtomicFormula |arithExpression
*/
String relTerm() throws THOMASException:
{
 	String result=""; 
}
{


  LOOKAHEAD(arithExpression())
   result = arithExpression()   {return result;   }
|
LOOKAHEAD(genAtomicFormula())
  result = genAtomicFormula()
  {return result;  }  

}
/**
	arithExpression := arithTerm [ ( “+” |“-” |“*” |“**” |“/” |“div” |“mod” ) artihTerm]*
*/
String arithExpression() :
{
  
   String arithTerm = "";
   String arithTerm2 = "";
   String operator = "";
}
{

	arithTerm = arithTerm()((< SUM >{operator = token.image;}|< SUBTRACTION >{operator = token.image;}|< MULTIPLICATION >{operator = token.image;} | < POWER >{operator = token.image;}|< DIVISION >{operator = token.image;}|< INTDIVISION >{operator = token.image;}|< MODULE >{operator = token.image;}) arithTerm2 = arithTerm())*
	{return arithTerm + operator + arithTerm2;}


}
/**
	arithTerm := numericConstant |variable |“-” arithTerm |“(” arithExpression “)”
*/
String arithTerm():
{
   String result ="";
   String arithTerm, arithExpression;
}
{

	 result = numericConstant()	 {return result;}
	 | result = variable()
	 {return result;} 
	 | < SUBTRACTION >{result = token.image;} arithTerm = arithTerm()
	 {return result + arithTerm;}
	 | "(" arithExpression = arithExpression() ")"
	 {return "("+arithExpression+")";}

}
/**
	variable := [A − Z] ([0 − Z])∗ |“_”
*/
String variable():{
  }
{ 	< variable > 	{return token.image;}
 	| "_" {return token.image;}

}
/**
	constant := numericConstant |stringConstant
*/
String constant():{
  String result="";}
{
 	 result = stringConstant() 	 {return result;}
 	 | result = numericConstant()
 	 {return result;}
 	  
}
/**
	numericConstant := [0 − 9]+
*/
String numericConstant():{
   }
{
 	 < numericConstant >{return token.image;}
}
/**
	stringConstant := [a − z] ([0 − Z])∗
*/
String stringConstant():{}
{
 	< stringConstant > {return token.image;}

}
/**
	normContent ::=“[” (deontic |“ ”) “,” ( targetContent |“ ”) “,” (action |“ ”) “,” activation “,” expiration “]” | "_"
*/
/*
String normContent() throws THOMASException:{
  String result = "";
  String deonticString, targetContent, action, activation, expiration;}
{
	"["(< deontic >{deonticString = token.image;}|"_"{deonticString = token.image;})","(targetContent = targetContent()|"_"{targetContent = token.image;})","(action = action()|"_"{action = token.image;})","activation = activation()","expiration = expiration()"]"	{ return "["+deonticString+","+targetContent+","+action+","+activation+","+expiration+"]";	}
	| "_" {return token.image;}
	

}*/
/**
	OMSCondition ::= OMSUnitPred |OMSRolesPred |OMSNormsPred |OMSRoleEnactPred
*/
String OMSCondition() throws THOMASException: {
String result = "";
  }
{
	result = OMSUnitPred()	{return result;}
	| result = OMSRolesPred()
	{return result;}
	| result = OMSNormsPred()
	{return result;}
	| result = OMSRoleEnactPred()
	{return result;}

}
/**
	OMSUnitPred ::= “isUnit” “(” term “)” |“hasType” “(” term “,” term “)” |“hasParent” “(” term “,” term “)”
*/
String OMSUnitPred() : {
	String result = "";
	String param1, param2;
  }
{
  
	< isUnit >{result = token.image;} "("param1 = term()")"
	{return result = result + "("+param1+")";}
	| < hasType >{result = token.image;} "("param1 = term()","param2 = OMSUnitTypesPred()")"
	{return result = result + "("+param1+","+param2+")";}
	| < hasParent >{result = token.image;} "("param1 = term()","param2 = term()")"
	{return result = result + "("+param1+","+param2+")";}

}

String OMSUnitTypesPred() :{
  String result = "";}
{
    		result = OMSUnitTypes()	{
		return result;	}
	
	|
		 
		result = variable()
	{
	  return result;	}


}


/**
	“ isRole” “(” term “,” term “)” |“hasAccesibility” “(” term “,” term “,” term “)” |“hasVisibility” “(”
term “,” term “,” term “)” |“hasPosition” “(” term “,” term “,” term “)”
*/
String OMSRolesPred(): {
  String result = "";
  String param1, param2, param3;
  
 }
{
    
	< isRole >{result = token.image;} "("param1 = term()","param2 = term()")"
	{return result = result + "("+param1+","+param2+")";}
	| < hasAccessibility >{result = token.image;} "("param1 = term()","param2 = term()","param3 = OMSAccessibilityPred()")"
	{return result = result + "("+param1+","+param2+","+param3+")";}
	| < hasVisibility >{result = token.image;} "(" param1 = term()","param2 = term()","param3 = OMSVisibilityPred()")"
	{return result = result + "("+param1+","+param2+","+param3+")";}
	| < hasPosition >{result = token.image;} "(" param1 = term()","param2 = term()","param3 = OMSPositionsPred()")"
	{return result = result + "("+param1+","+param2+","+param3+")";}
}


String OMSAccessibilityPred() :
{
  String result = "";
}
{
	result = OMSaccessibility()
	{
	  return result;
	}|
	result = variable()
	{
	  return result;
	} 

}

String OMSPositionsPred() :
{
  String result = "";
}
{
	result = OMSPositions()
	{
	  return result;
	}|
	result = variable()
	{
	  return result;
	} 

}

String OMSVisibilityPred() :
{
  String result = "";
}
{
	result = OMSVisibility()
	{
	  return result;
	}|
	result = variable()
	{
	  return result;
	} 

}


/**
	“ isNorm” “(” term , term “)” |“hasDeontic” “(” term , term , term “)”
|  "hasTarget" "("term, term, term, term ")" | "hasAction" "("term, term, term")"
*/
String OMSNormsPred(): {
  String result="";
  String param1, param2, param3, param4;}
{
	< isNorm >{ result = token.image;} "("param1 = term()"," param2 = term()")"{return result = result + "("+param1+","+ param2+")";}
	| < hasDeontic > { result = token.image;} "("param1 = term()"," param2 = term() "," param3 = deonticPred()")"
	{return result = result + "("+param1+","+ param2+","+ param3+")";}
	| < hasTarget > { result = token.image;} "("param1 = term()"," param2 = term() "," param3 = targetTypePred() "," param4 = targetValuePred()")"
	{return result = result + "("+param1+","+ param2+","+ param3+","+param4+")";}
	| < hasAction > { result = token.image;} "("param1 = term()"," param2 = term() "," param3 = OMSActionNamePred()")"
	{return result = result + "("+param1+","+ param2+","+ param3+")";}
	
}


/**
	deonticContent := deontic | "_"
*/

String deonticPred():
{
  String result = "";}
{	< deontic >
 	{return token.image;}
| result = variable() {return result;}

}

/**
	targetTypeName := targetType | "_"
*/

String targetTypePred():
{
  String result = "";
}
{
	< roleName >
 	{return token.image;}
|
	< agentName >
 	{return token.image;}
|
	< positionName >
 	{return token.image;}
| result = variable() {return result;}

}

/**
	valueTypeName := OMSPositions |constant |variable
*/

String targetValuePred():
{
  String result = "";
}
{
	result = OMSPositions() {return result;}
|result = constant() {return result;}
| result = variable() {return result;}

}

String OMSActionNamePred():
{
  String result = "";}
{
	result = OMSActionName(){return result;}
| result = variable() {return result;}

}

/**
OMSActionName ::= “registerUnit” |“deregisterUnit” |“registerRole” |“deregisterRole” |“registerNorm” |“deregisterNorm”
|“allocateRole” |“deallocateRole” |“joinUnit” |“informAgentRole” |“informMembers” |“informQuantityMembers”
|“informUnit” |“informUnitRoles” |“informTargetNorms” |“informRole” |“informNorm” |“acquireRole” |“leaveRole”

*/

String OMSActionName():
{
  String result = "";}
{
	
	< registerUnit >{return token.image;} 
|  < deregisterUnit >{return token.image;} 

| 	< registerRole >{return token.image;} 

| 	< deregisterRole >{return token.image;} 

| 	< registerNorm >{return token.image;}	

| 	< deregisterNorm >{return token.image;} 

| 	< allocateRole >{return token.image;} 

| 	< deallocateRole >{return token.image;}

| 	< joinUnit >{return token.image;}	

| 	< informAgentRole >{return token.image;} 

| 	< informMembers >{return token.image;} 

| 	< informQuantityMembers >{return token.image;} 

| 	< informUnit > {return token.image;}

| 	< informUnitRoles >{return token.image;}

| 	< informTargetNorms >{return token.image;}

| 	< informRole >{return token.image;} 

| 	< informNorm >{return token.image;} 

| 	< acquireRole > {return token.image;}

| 	< leaveRole > {return token.image;}


}


/**
	“ isAgent” “(” term “)” |“playsRole” “(” term “,” term “,” term “)” |“roleCardinality” “(” term
“,” term “,” term “)” |“positionCardinality” “(” term “,” term “,” term “)”
*/
String OMSRoleEnactPred() :
{
	String result = "";
	String param1 = "", param2 = "", param3 = "";
	
  }
{
	< isAgent >{result = token.image;} "("param1 = term()")"{return result = result +"("+param1+ ")";}
	| < playsRole >{result = token.image;} "("param1 = term()"," param2 = term()","param3 = term()")"{
	  				return result =  result +"("+param1+ ","+param2+ ","+param3+ ")";}
	| < roleCardinality > {result = token.image;} "(" param1 = term()"," param2 = term()"," param3 = numericConstantPred()")" {
	  				return result =  result +"("+param1+ ","+param2+ ","+param3+ ")";}
	| < positionCardinality > {result = token.image;} "(" param1 = term()"," param2 = term()"," param3 = numericConstantPred()")" {
	  				return result =  result +"("+param1+ ","+param2+ ","+param3+ ")";}
}

/**
  numeriConstantPred::=numericConstant |variable

*/

String numericConstantPred():
{
  String result = "";}
{	result = numericConstant(){return result;}| result = variable(){return result;}  		

}


/**
	OMSAction ::= “registerUnit” “(” term “,” term “,” term “,” term “,” term “)” |
“deregisterUnit” “(” term “,” term “)” |
“registerRole” “(” term “,” term “,” term “,” term “,” term “,” term “)” |
“deregisterRole” “(” term “,” term ”,” term “)” |
“registerNorm” “(” term “,” term “,” term "," term “)” |
“deregisterNorm” “(” term “,” term “,” term ”)” |
“allocateRole” “(” term “,” term “,” term “,” term “)” |
“deallocateRole” “(” term “,” term “,” term “,” term “)” |
“joinUnit” “(” term “,” term “,” term “)” |
“informAgentRole” “(” term “,” term “)” |

“informMembers” “(” term “,” term “,” term “,” term “)” |
“informQuantityMembers” “(” term “,” term “,” term “,” term “)” |
“informUnit” “(” term “,” term “)” |
“informUnitRoles” “(” term “,” term “)” |
“informTargetNorms” “(” term “,” term “,” term “,” term “)” |
“informRole” “(” term “,” term “,” term “)” |
“informNorm” “(” term “,” term “,” term “)” |
“acquireRole” “(” term “,” term “,” term “)” |
“leaveRole” “(” term “,” term “,” term “)” |
*/
ArrayList<String> OMSAction() throws THOMASException : {

	String result= "";
	ArrayList<String > resultArray= new ArrayList<String >();
	String service, param1, param2, param3, param4, param5, param6, param7;
	
  }
{ 

	try
	{	  		< registerUnit >{service = token.image;} "("param1 = term()","param2 = OMSUnitTypesPred()","param3 = term()","param4 = term()","param5 = term()")"
		{
		  resultArray.add(service);
		  result = service +"("+ param1 + ","+ param2 + ","+ param3 + ","+ param4 + ","+ param5+ ")";
		  resultArray.add(result);
		  resultArray.add(param1);
		  resultArray.add(param2);
		  resultArray.add(param3);
		  resultArray.add(param4);
		  resultArray.add(param5);
		  return resultArray;}
	}catch(ParseException pex)
	{		System.out.println("----------------------------------");
    	System.out.println("Invalid parameter "+getToken(0)+" in OMS action registerUnit");
		StringBuffer expected = new StringBuffer();
		for (int i = 0; i < pex.expectedTokenSequences.length; i++) {
    		for (int j = 0; j < pex.expectedTokenSequences[i].length; j++) {
          		expected.append(tokenImage[pex.expectedTokenSequences[i][j]]).append(' ');
        	}
      	}

      	System.out.println("Expected parameters: "+ expected.toString());
    	System.out.println("----------------------------------");
		String message = l10n.getMessage(MessageID.NOT_CREATOR_IN_PARENT_UNIT, "");
		//throw new ParseException(message);
		return null;
	}
|   < deregisterUnit >{service = token.image;} "("param1 = term()"," param2 = term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2+ ")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
 	return resultArray;}
| 	< registerRole >{service = token.image;} "("param1 = term()","param2 =term()","param3 =OMSAccessibilityPred()","param4 =OMSVisibilityPred()","param5 =OMSPositionsPred()","param6 =term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ","+ param3 + ","+ param4 + ","+ param5+"," + param6 +")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
  	resultArray.add(param3);
  	resultArray.add(param4);
  	resultArray.add(param5);
  	resultArray.add(param6);
	return resultArray;}
| 	< deregisterRole >{service = token.image;} "("param1 = term()"," param2 = term()"," param3 = term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ","+ param3 + ")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
  	resultArray.add(param3);
	return resultArray;}
| 	< registerNorm >{service = token.image;}	"("param1 = term()","param2 = term()"," param3 = deonticPred()"," param4=targetTypePred()"," param5=targetValuePred()"," param6=OMSActionNamePred()"," param7 = term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ","+ param3 +","+param4+")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
  	resultArray.add(param3);
  	resultArray.add(param4);
  	resultArray.add(param5);
  	resultArray.add(param6);
  	resultArray.add(param7);
  	
	return resultArray;}
| 	< deregisterNorm >{service = token.image;} "("param1 = term()","param2 = term()","param3 = term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ","+ param3 + ")";
  	resultArray.add(result); 
  	resultArray.add(param1);
  	resultArray.add(param2);
  	resultArray.add(param3);
	return resultArray;}
| 	< allocateRole >{service = token.image;} "("param1 = term()","param2 = term()","param3 = term()","param4 = term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ","+ param3 + ","+ param4 + ")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
  	resultArray.add(param3);
  	resultArray.add(param4);
	return resultArray;}
| 	< deallocateRole >{service = token.image;} "("param1 = term()"," param2 = term()","param3 = term()","param4 = term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ","+ param3 + ","+ param4 + ")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
  	resultArray.add(param3);
  	resultArray.add(param4);
	return resultArray;}
| 	< joinUnit >{service = token.image;}	"("param1 = term()","param2 = term()","param3 = term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ","+ param3 + ")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
  	resultArray.add(param3);
	return resultArray;}
| 	< informAgentRole >{service = token.image;} "(" param1 = term()"," param2 =term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
	return resultArray;}
| 	< informMembers >{service = token.image;} "("param1 = term()","param2 = term()","param3 = OMSPositionsPred()"," param4 = term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ","+ param3 + ","+ param4  +")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
  	resultArray.add(param3);
  	resultArray.add(param4);
	return resultArray;}
| 	< informQuantityMembers >{service = token.image;} "("param1 = term()"," param2 = term()"," param3 = OMSPositionsPred()","param4 = term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ","+ param3 + ","+ param4 + ")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
  	resultArray.add(param3);
  	resultArray.add(param4);
	return resultArray;}
| 	< informUnit > {service = token.image;}"("param1 = term()","param2 = term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
	return resultArray;}
| 	< informUnitRoles >{service = token.image;} "("param1 = term()","param2 = term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
	return resultArray;}
| 	< informTargetNorms >{service = token.image;} "("param1 = targetTypePred()","param2 = targetValuePred()","param3 = term()","param4 =term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ","+ param3 + ","+ param4 + ")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
  	resultArray.add(param3);
  	resultArray.add(param4);
	return resultArray;}
| 	< informRole >{service = token.image;} "("param1 = term()"," param2 = term()","param3 = term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ","+ param3 + ")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
  	resultArray.add(param3);
	return resultArray;}
| 	< informNorm >{service = token.image;} "("param1 = term()","param2 = term()","param3 = term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ","+ param3 +  ")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
  	resultArray.add(param3);
	return resultArray;}
| 	< acquireRole > {service = token.image;}"("param1 = term()","param2 = term()","param3 = term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ","+ param3 + ")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
  	resultArray.add(param3);
	return resultArray;}
| 	< leaveRole > {service = token.image;}"("param1 = term()"," param2 = term()","param3 = term()")"
{
	resultArray.add(service);
  	result = service +"("+ param1 + ","+ param2 + ","+ param3 + ")";
  	resultArray.add(result);
  	resultArray.add(param1);
  	resultArray.add(param2);
  	resultArray.add(param3);
	return resultArray;}

}
/**
	OMSConstants ::= OMSPositions |OMSAccesibility |OMSVisibility |OMSUnitTypes 
*/
String OMSConstants():{
  String result = "";}
{ 	/* OMSPositions() | OMSaccessibility() | OMSVisibility() |  OMSUnitTypes() | < virtual > | < participant >*/

 	  result = OMSPositions() { return result;}
 	 |  result = OMSaccessibility() { return result;}
 	 |  result = OMSVisibility() { return result;}
 	 |  result = OMSUnitTypes() { return result;}
 	 

}
/**
	OMSPositions ::= “creator” |“member” |“supervisor” |“subordinate”
*/
String OMSPositions():{
   String variable="";}
{
	< OMSPositions >
	{ return token.image;}

 	}
/**
	OMSAccesibility ::= “external” |“internal”
*/
String OMSaccessibility():{
   String variable="";}
{
	< OMSaccessibility >
	{ return token.image;}

 	 
}

/**
	OMSVisibility ::= “public” |“private”
*/
String OMSVisibility():{
   String variable="";}
{ 	 
	< OMSVisibility >
	{ return token.image;}


}

/**
	OMSUnitTypes ::= “ﬂat” |“team” |“hierarchy”
*/
String OMSUnitTypes():{
  String variable="";}
{
  try
  {    
 	//< flat > | < team > | < hierarchy >
 	< OMSUnitTypes > 	{ return token.image;}

  }
  catch(ParseException pex)
  {	System.out.println("Unit type not found: "+ getNextToken());
	return null;
  }


}

/*void genActionFormula() :{}*/
