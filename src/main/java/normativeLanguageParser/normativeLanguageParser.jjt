/**
* JJTree file
*/

options {
  JDK_VERSION = "1.5";
  IGNORE_CASE = true;
  LOOKAHEAD=5;
  FORCE_LA_CHECK=true;
  STATIC=false;
}
 
PARSER_BEGIN(NormativeLanguageParser) 
package normativeLanguageParser;
public class NormativeLanguageParser {
  public static String myToString(SimpleNode parserResult) { 
  	if(parserResult.jjtGetValue()==null)
  		return NormativeLanguageParserTreeConstants.jjtNodeName[parserResult.id]; 
  	else
  		return NormativeLanguageParserTreeConstants.jjtNodeName[parserResult.id]+":"+parserResult.jjtGetValue(); 
  	 }
  
  public static String myToString(String prefix, SimpleNode parserResult) { return prefix + myToString(parserResult); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public static void PrintParserResult(String prefix,SimpleNode parserResult) {
    System.out.println(myToString(prefix,parserResult));
    if (parserResult.children != null) {
      for (int i = 0; i < parserResult.children.length; ++i) {
  SimpleNode n = (SimpleNode)parserResult.children[i];
  if (n != null) {
    PrintParserResult(prefix + " ",n);
  }
      }
    }}
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    try{
    new NormativeLanguageParser(System.in);
      SimpleNode parserResult= NormativeLanguageParser.Norm();
      PrintParserResult(" ",parserResult);
      System.out.println("Thank you.");
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
PARSER_END(NormativeLanguageParser)

SKIP :{
" " | "\t" | "\r" | "\n"}

TOKEN : { < DEONTIC_CONCEPT : "OBLIGED" | "FORBIDDEN" | "PERMITTED" > }
TOKEN : { < IF : "IF"> }
TOKEN : { < SANCTION : "SANCTION"> }
TOKEN : { < REWARD : "REWARD"> }
TOKEN : { < REQUEST : "REQUEST"> }
TOKEN : { < SERVE : "SERVE"> }
TOKEN : { < REGISTER : "REGISTER"> }
TOKEN : { <MESSAGE : "MESSAGE"> }
TOKEN : { <PROCESS : "PROCESS"> }
TOKEN : { <PROFILE : "PROFILE"> }
TOKEN : { < SENDER : "SENDER" > }
TOKEN : { < RECEIVER : "RECEIVER" > }
TOKEN : { < PERFORMATIVE : "PERFORMATIVE" > }
TOKEN : { < CONNECTS : "CONNECTS" > }
TOKEN : { < JOIN : "JOIN" > }
TOKEN : { < THEN : "THEN" > }
TOKEN : { < ELSE : "ELSE" > }
TOKEN : { < WHILE : "WHILE" > }
TOKEN : { < DO : "DO" > }
TOKEN : {<CONTENT: "CONTENT">}
TOKEN : {< COLON: ":" >}
TOKEN : {< GUION: "-" >}
TOKEN : {< AND: "AND" >}
TOKEN : {< OR: "OR" >}
TOKEN : {< NOT: "NOT" >}
TOKEN : {< LPAR: "(" >}
TOKEN : {< RPAR: ")" >}
TOKEN : {< LBRA: "[" >}
TOKEN : {< RBRA: "]" >}
TOKEN : { < OPERATOR : "<" | "<=" |">" |">=" |"=" > }
TOKEN : { < NORMATIVE_RESULT : "FAILED" | "SATISFIED"> }
TOKEN : { < QUANTITY : "QUANTITY"> }
TOKEN : { < COMA : ","> }
TOKEN : { < RESULT : "RESULT"> }
TOKEN : { < INPUT : "INPUT" > }
TOKEN : { < OUTPUT : "OUTPUT" > }
TOKEN : { < PRE : "PRE" > }
TOKEN : { < POST : "POST" > }
TOKEN : { < BEFORE : "BEFORE" > }
TOKEN : { < AFTER : "AFTER" > }
TOKEN : { < BETWEEN : "BETWEEN" > }
TOKEN : { < TYPE : "INTEGER" | "STRING" | "FLOAT" | "CHAR" | "ENUMERATE" > }
TOKEN : {< VALUE: ("\""(["a"-"z","A"-"Z","0"-"9"])*"\"" |"\'"(["a"-"z","A"-"Z","0"-"9"])*"\'" )>}
TOKEN : {< VARIABLE: "?"(["a"-"z","A"-"Z"]) (["a"-"z","A"-"Z","0"-"9"])* >}
TOKEN : {< ID: (["a"-"z","A"-"Z"]) (["a"-"z","A"-"Z","0"-"9"])* >}


	
SimpleNode Norm():
  {}
  
{	DeonticConcept()
	Entity()
	Action()
	(If())?
	(TemporalSituation())?
	(Sanction())?
	(Reward())?<EOF>{return jjtThis;}}

void DeonticConcept():
{Token t;}
{
	t=<DEONTIC_CONCEPT>{jjtThis.jjtSetValue(t.image);}
}
void Entity	():
{}
{ (AgentRoleUnit()| RoleUnit()| ID())}

void ID	():
{Token t;}
{
	t=<ID>{jjtThis.jjtSetValue(t.image);}
	}
void RoleUnit():
{Token t;}
{
	Role()<GUION>Unit()
	}

void Role():
{Token t;}
{
	(t=<ID>|t=<VARIABLE>){jjtThis.jjtSetValue(t.image);}
	}	
void Unit():
{Token t;}
{
	(t=<ID>|t=<VARIABLE>){jjtThis.jjtSetValue(t.image);}
	}
void AgentRoleUnit():
{}
{
	Agent()<COLON>Role()<GUION>Unit()
}
void Agent():
{Token t;}
{
	(t=<ID>|t=<VARIABLE>){jjtThis.jjtSetValue(t.image);}
	}
void Action():
{Token t;}
{
	(Request()|Register()|Serve())
}
void Request():
{}
{<REQUEST> Service() (Message())?}


void Register():
{}
{<REGISTER> Service() Profile()
	(Process())?}

void Serve():
{}
{<SERVE> Service() (Process())?
	(Message())?}
	
void Service():
{Token t;}
{t=<ID>{jjtThis.jjtSetValue(t.image);}}

void Message():
{}
{ <MESSAGE><LPAR>MessageInfo()<RPAR>}

void Process():
{Token t;}
{ <PROCESS>ProcessDescription()}
	
void Profile():
{Token t;}
{ <PROFILE>ProfileDescription()}
	
void ConditionExpression():
{}
{
(Condition()|Not()|And()|Or())
}
void Not():
{}
{<NOT><LPAR>Condition()<RPAR>}

void And():
{}
{<LPAR>Condition()<AND>ConditionExpression()<RPAR>}

void Or():
{}
{<LPAR>Condition()<OR>ConditionExpression()<RPAR>}

void Condition():
{Token t;}
{
	(Variant()t=<OPERATOR>Variant(){jjtThis.jjtSetValue(t.image);}|t=<NORMATIVE_RESULT><LPAR>NormID()<RPAR>{jjtThis.jjtSetValue(t.image);})
}
void NormID():
{Token t;}	
{t=<ID>{jjtThis.jjtSetValue(t.image);}}
void Variant():
{}
{
	(Atomic()| Formula()| Value())
}
void Atomic():
{}
{
	(IDVariable()| IDValue()|Variable()| ID())
}
void IDVariable():
{}
{ID()Variable()}
void IDValue():
{}
{ID()Value()}
void Variable():
{Token t;}
{t=<VARIABLE>{jjtThis.jjtSetValue(t.image);}}
void Formula():
{Token t;}
{
	(<ID><LPAR>Args()<RPAR>| ServiceResult()| t=<QUANTITY><LPAR>Args()<RPAR>{jjtThis.jjtSetValue(t.image);})
}
void Args():
{}
{
	Variant()(<COMA>Variant())?
}
void ServiceResult():
{}
{
	<RESULT><LPAR>Service()(<COMA>Entity())?(<COMA>contextTime())?<RPAR>
}

void contextTime():
{}
{
 (Variable()|Value())
}
void Value():
{Token t;}
{t=<VALUE>{jjtThis.jjtSetValue(t.image);}}
void MessageInfo():
{}
{
	(Sender())?
	(Receiver())?
	(Performative())?
	Content()}
void Sender():
{Token t;}
{<SENDER><LPAR>Entity()<RPAR>
}
void Receiver():
{Token t;}
{<RECEIVER><LPAR>Entity()<RPAR>
}
void Performative():
{Token t;}
{<PERFORMATIVE><LPAR>t=<ID>{jjtThis.jjtSetValue(t.image);}<RPAR>
}
	
void Content():
{Token t1,t2;}
{<CONTENT><LPAR>Args()<RPAR>}


void ProfileDescription():
{}
{
	(ID()|Input()(Output())?(Precondition())?(Postcondition())?)
	}
void Input():
{}
{<INPUT><LPAR>ParamList()<RPAR>}
void Output():
{}
{<OUTPUT><LPAR>ParamList()<RPAR>}
void Precondition():
{}
{<PRE><LPAR>ConditionExpression()<RPAR>}

void Postcondition():
{}
{<POST><LPAR>ConditionExpression()<RPAR>}

void ParamList():
{Token t1,t2;}
{
	ParamType()(<COMA>ParamList())*
}	
void ParamType():
{}
{ParameterID()<COLON>Type()}
void Type():
{Token t;}
{t=<TYPE>{jjtThis.jjtSetValue(t.image);}}
void ParameterID():
{Token t;}
{(t=<ID>|t=<VARIABLE>){jjtThis.jjtSetValue(t.image);}}

void ProcessDescription():
{}
{(ID()| Variable() | Connects() | Join() | IfThenElse() | While()) 
	}
	
void Connects():
{}
{ProcessAction()<CONNECTS>ProcessDescription()}

void ProcessAction():
{}
{((TaskID()<LPAR>ParamList()<RPAR>)|Request())}

void TaskID():
{Token t;}
{t=<ID>{jjtThis.jjtSetValue(t.image);}}

void Join():
{}
{ProcessAction()<JOIN>ProcessDescription()}

void IfThenElse():
{}
{If()Then()(Else())?}


void If():
{}
{<IF>ConditionExpression()}
void Then():
{}
{<THEN><LPAR>ProcessDescription()<RPAR>}

void Else():
{}
{<ELSE><LPAR>ProcessDescription()<RPAR>}

void While():
{}
{<WHILE>ConditionExpression()Do()}
void Do():
{}
{<DO><LPAR>ProcessDescription()<RPAR>}

void TemporalSituation():
{}
{ Before()|After()|Between()}
void Before():
{}
{<BEFORE>Situation()}
void After():
{}
{<AFTER>Situation()}
void Between():
{}
{<BETWEEN><LPAR>Situation()<COMA>Situation()<RPAR>}


void Situation():
{}
{Deadline()|ServiceResult()|<LBRA>Entity()<RBRA>Action()}

void Deadline():
{}
{Variable()|Value()}

void Sanction():
{}
{<SANCTION>NormID()}

void Reward():
{}
{<SANCTION>NormID()}