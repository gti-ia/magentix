/* Generated By:JJTree&JavaCC: Do not edit this line. NormativeLanguageParserConstants.java */
package normativeLanguageParser;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface NormativeLanguageParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DEONTIC_CONCEPT = 5;
  /** RegularExpression Id. */
  int IF = 6;
  /** RegularExpression Id. */
  int SANCTION = 7;
  /** RegularExpression Id. */
  int REWARD = 8;
  /** RegularExpression Id. */
  int REQUEST = 9;
  /** RegularExpression Id. */
  int SERVE = 10;
  /** RegularExpression Id. */
  int REGISTER = 11;
  /** RegularExpression Id. */
  int MESSAGE = 12;
  /** RegularExpression Id. */
  int PROCESS = 13;
  /** RegularExpression Id. */
  int PROFILE = 14;
  /** RegularExpression Id. */
  int SENDER = 15;
  /** RegularExpression Id. */
  int RECEIVER = 16;
  /** RegularExpression Id. */
  int PERFORMATIVE = 17;
  /** RegularExpression Id. */
  int CONNECTS = 18;
  /** RegularExpression Id. */
  int JOIN = 19;
  /** RegularExpression Id. */
  int THEN = 20;
  /** RegularExpression Id. */
  int ELSE = 21;
  /** RegularExpression Id. */
  int WHILE = 22;
  /** RegularExpression Id. */
  int DO = 23;
  /** RegularExpression Id. */
  int CONTENT = 24;
  /** RegularExpression Id. */
  int COLON = 25;
  /** RegularExpression Id. */
  int GUION = 26;
  /** RegularExpression Id. */
  int AND = 27;
  /** RegularExpression Id. */
  int OR = 28;
  /** RegularExpression Id. */
  int NOT = 29;
  /** RegularExpression Id. */
  int LPAR = 30;
  /** RegularExpression Id. */
  int RPAR = 31;
  /** RegularExpression Id. */
  int LBRA = 32;
  /** RegularExpression Id. */
  int RBRA = 33;
  /** RegularExpression Id. */
  int OPERATOR = 34;
  /** RegularExpression Id. */
  int NORMATIVE_RESULT = 35;
  /** RegularExpression Id. */
  int QUANTITY = 36;
  /** RegularExpression Id. */
  int COMA = 37;
  /** RegularExpression Id. */
  int RESULT = 38;
  /** RegularExpression Id. */
  int INPUT = 39;
  /** RegularExpression Id. */
  int OUTPUT = 40;
  /** RegularExpression Id. */
  int PRE = 41;
  /** RegularExpression Id. */
  int POST = 42;
  /** RegularExpression Id. */
  int BEFORE = 43;
  /** RegularExpression Id. */
  int AFTER = 44;
  /** RegularExpression Id. */
  int BETWEEN = 45;
  /** RegularExpression Id. */
  int TYPE = 46;
  /** RegularExpression Id. */
  int VALUE = 47;
  /** RegularExpression Id. */
  int VARIABLE = 48;
  /** RegularExpression Id. */
  int ID = 49;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<DEONTIC_CONCEPT>",
    "\"IF\"",
    "\"SANCTION\"",
    "\"REWARD\"",
    "\"REQUEST\"",
    "\"SERVE\"",
    "\"REGISTER\"",
    "\"MESSAGE\"",
    "\"PROCESS\"",
    "\"PROFILE\"",
    "\"SENDER\"",
    "\"RECEIVER\"",
    "\"PERFORMATIVE\"",
    "\"CONNECTS\"",
    "\"JOIN\"",
    "\"THEN\"",
    "\"ELSE\"",
    "\"WHILE\"",
    "\"DO\"",
    "\"CONTENT\"",
    "\":\"",
    "\"-\"",
    "\"AND\"",
    "\"OR\"",
    "\"NOT\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "<OPERATOR>",
    "<NORMATIVE_RESULT>",
    "\"QUANTITY\"",
    "\",\"",
    "\"RESULT\"",
    "\"INPUT\"",
    "\"OUTPUT\"",
    "\"PRE\"",
    "\"POST\"",
    "\"BEFORE\"",
    "\"AFTER\"",
    "\"BETWEEN\"",
    "<TYPE>",
    "<VALUE>",
    "<VARIABLE>",
    "<ID>",
  };

}
