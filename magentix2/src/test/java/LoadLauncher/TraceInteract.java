package LoadLauncher;

import es.upv.dsic.gti_ia.core.ACLMessage;
import es.upv.dsic.gti_ia.core.AgentID;
//import es.upv.dsic.gti_ia.core.BaseAgent;

/**
 * Methods to interact with the trace manager in order to publish and unpublish tracing services,
 * to subscribe and unsubscribe to/from tracing services and to list available tracing entities
 * and services.
 * 
 * @author L Burdalo (lburdalo@dsic.upv.es)
 * 
 */
public class TraceInteract {
	
	/**
	 * Publish a tracing service so that other agents can request it
	 * and receive the corresponding trace events.<p>
	 * 
	 * The applicant agent must specify a name for the tracing service,
	 * the corresponding type of the trace events which will be provided
	 * by the service and a description of the tracing service.<p>
	 * 
	 * This method communicates via ACL with a trace manager entity in localhost
	 * ("qpid://tm@localhost:8080"). To interact with a different trace manager
	 * entity, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#publishTracingService(AgentID tms_aid, BaseAgent applicantAgent, String serviceName, String description)}
	 * 
	 * @param applicantAgent	Agent which wants to publish the tracing service
	 * @param serviceName		Name of the tracing service which is to be published
	 * @param description		Description of the tracing service to be published
	 * 
	 * @see es.upv.dsic.gti_ia.core.TracingService
	 */
	static public void publishTracingService(BaseAgent applicantAgent, String serviceName, String description){
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);
		AgentID tms_aid = new AgentID("qpid://tm@localhost:8080");
		String body;
		
		msg.setReceiver(tms_aid);
		msg.setSender(applicantAgent.getAid());
		msg.setLanguage("ACL");
		body = String.valueOf(System.currentTimeMillis()) + "#" + "publish" + "#" + serviceName.length() + "#" + serviceName + description;
		//System.out.println("Publication request: " + body);
		msg.setContent(body);
		/**
		 * Sending a ACLMessage
		 */
		applicantAgent.send(msg);
	}
	
	/**
	 * Publish a tracing service so that other agents can request it
	 * and receive the corresponding trace events.<p>
	 * 
	 * The applicant agent must specify a name for the tracing service,
	 * the corresponding type of the trace events which will be provided
	 * by the service and a description of the tracing service.<p>
	 * 
	 * This method communicates via ACL with the trace manager entity specified
	 * by the parameter tms_aid. To interact with the default trace manager entity in
	 * localhost ("qpid://tm@localhost:8080"), use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#publishTracingService(BaseAgent applicantAgent, String serviceName, String description)}
	 * 
	 * @param tms_aid			AgentID of the trace manager entity which is being sent the publication request
	 * @param applicantAgent	Agent which wants to publish the tracing service
	 * @param serviceName		Name of the tracing service which is to be published
	 * @param description		Description of the tracing service to be published
	 * 
	 * @see es.upv.dsic.gti_ia.core.TracingService
	 * @see es.upv.dsic.gti_ia.core.AgentID
	 */
	static public void publishTracingService(AgentID tms_aid, BaseAgent applicantAgent, String serviceName, String description){
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);
		String body;
		
		msg.setReceiver(tms_aid);
		msg.setSender(applicantAgent.getAid());
		msg.setLanguage("ACL");
		body = "publish" + "#" + serviceName.length() + "#" + serviceName + description;
		//System.out.println("Publication request: " + body);
		msg.setContent(body);
		/**
		 * Sending a ACLMessage
		 */
		applicantAgent.send(msg);
	}
	
	/**
	 * Unpublish a tracing service.<p>
	 * 
	 * Unpublish a previously published tracing service so that other agents cannot
	 * subscribe nor receive the corresponding trace events from the applicantAgent
	 * (if there were more providers of the tracing service, subscribers would still be
	 * able to receive trace events of that tracing service generated by these other
	 * providers.<p>
	 * 
	 * This method communicates via ACL with a trace manager entity in localhost
	 * ("qpid://tm@localhost:8080"). To interact with a different trace manager
	 * entity, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#unpublishTracingService(AgentID tms_aid, BaseAgent applicantAgent, String serviceName)}
	 * 
	 * @param applicantAgent	Agent which wants to unpublish the tracing service
	 * @param serviceName		Name of the tracing service which is to be unpublished
	 */
	static public void unpublishTracingService(BaseAgent applicantAgent, String serviceName){
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);
		AgentID tms_aid = new AgentID("qpid://tm@localhost:8080");
		String body;
		
		msg.setReceiver(tms_aid);
		msg.setSender(applicantAgent.getAid());
		msg.setLanguage("ACL");
		body = String.valueOf(System.currentTimeMillis()) + "#" + "unpublish" + "#" + serviceName;
		//System.out.println(body);
		msg.setContent(body);
		/**
		 * Sending a ACLMessage
		 */
		applicantAgent.send(msg);
	}
	
	/**
	 * Unpublish a tracing service.<p>
	 * 
	 * Unpublish a previously published tracing service so that other agents cannot
	 * subscribe nor receive the corresponding trace events from the applicantAgent
	 * (if there were more providers of the tracing service, subscribers would still be
	 * able to receive trace events of that tracing service generated by these other
	 * providers.<p>
	 * 
	 * This method communicates via ACL with the trace manager entity specified
	 * by the parameter tms_aid. To interact with the default trace manager entity in
	 * localhost ("qpid://tm@localhost:8080"), use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#unpublishTracingService(BaseAgent applicantAgent, String serviceName)}
	 * 
	 * @param tms_aid			AgentID of the trace manager entity which is being sent the unpublication request
	 * @param applicantAgent	Agent which wants to unpublish the tracing service
	 * @param serviceName		Name of the tracing service which is to be unpublished
	 */
	static public void unpublishTracingService(AgentID tms_aid, BaseAgent applicantAgent, String serviceName){
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);
		String body;
		
		msg.setReceiver(tms_aid);
		msg.setSender(applicantAgent.getAid());
		msg.setLanguage("ACL");
		body = "unpublish" + "#" + serviceName;
		//System.out.println(body);
		msg.setContent(body);
		/**
		 * Sending a ACLMessage
		 */
		applicantAgent.send(msg);
	}
	
	/**
	 * Request a tracing service from a specific tracing entity.<p>
	 * 
	 * The requester agent must specify a name for the tracing service,
	 * the corresponding type of the trace events which will be provided
	 * by the service and a description of the tracing service.<p>
	 * 
	 * This method communicates via ACL with a trace manager entity in localhost
	 * ("qpid://tm@localhost:8080"). To interact with a different trace manager
	 * entity, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#requestTracingService(AgentID tms_aid, BaseAgent requesterAgent, String serviceName, AgentID originEntity)}<p>
	 * 
	 * This method requests a tracing service provided by a specific tracing entity. To request a tracing service from
	 * any tracing entity and receive the trace events of the corresponding tracing service from any entity in the system
	 * which offers that tracing service, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#requestTracingService(BaseAgent requesterAgent, String serviceName)} 
	 * 
	 * @param requesterAgent	Agent which wants to request the tracing service
	 * @param serviceName		Name of the tracing service which is to be requested
	 * @param originEntity		AgentID of the tracing entity whose tracing service is requested  
	 * 
	 * @see es.upv.dsic.gti_ia.core.TracingService
	 */
	static public void requestTracingService(BaseAgent requesterAgent, String serviceName, AgentID originEntity) {
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.SUBSCRIBE);
		AgentID tms_aid = new AgentID("qpid://tm@localhost:8080");
		
		msg.setReceiver(tms_aid);
		msg.setSender(requesterAgent.getAid());
		msg.setLanguage("ACL");
		msg.setContent(String.valueOf(System.currentTimeMillis()) + "#" + serviceName + "#" + originEntity.toString());
		/**
		 * Sending a ACLMessage
		 */
		requesterAgent.send(msg);
	}
	
	/**
	 * Request a tracing service from a specific tracing entity.<p>
	 * 
	 * The requester agent must specify a name for the tracing service,
	 * the corresponding type of the trace events which will be provided
	 * by the service and a description of the tracing service.<p>
	 * 
	 * This method communicates via ACL with the trace manager entity specified
	 * by the parameter tms_aid. To interact with the default trace manager entity in
	 * localhost ("qpid://tm@localhost:8080"), use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#requestTracingService(BaseAgent requesterAgent, String serviceName, AgentID originEntity)}<p>
	 * 
	 * This method requests a tracing service provided by a specific tracing entity. To request a tracing service from
	 * any tracing entity and receive the trace events of the corresponding tracing service from any entity in the system
	 * which offers that tracing service, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#requestTracingService(AgentID tms_aid, BaseAgent requesterAgent, String serviceName, AgentID originEntity)} 
	 * 
	 * @param tms_aid			AgentID of the trace manager entity which is being sent the request
	 * @param requesterAgent	Agent which wants to request the tracing service
	 * @param serviceName		Name of the tracing service which is to be requested
	 * @param originEntity		AgentID of the tracing entity whose tracing service is requested  
	 * 
	 * @see es.upv.dsic.gti_ia.core.TracingService
	 */
	static public void requestTracingService(AgentID tms_aid, BaseAgent requesterAgent, String serviceName, AgentID originEntity) {
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.SUBSCRIBE);
		
		msg.setReceiver(tms_aid);
		msg.setSender(requesterAgent.getAid());
		msg.setLanguage("ACL");
		msg.setContent(serviceName + "#" + originEntity.toString());
		/**
		 * Sending a ACLMessage
		 */
		requesterAgent.send(msg);
	}
	
	/**
	 * Request a tracing service from any tracing entity.<p>
	 * 
	 * The requester agent must specify a name for the tracing service,
	 * the corresponding type of the trace events which will be provided
	 * by the service and a description of the tracing service.<p>
	 * 
	 * This method communicates via ACL with a trace manager entity in localhost
	 * ("qpid://tm@localhost:8080"). To interact with a different trace manager
	 * entity, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#requestTracingService(AgentID tms_aid, BaseAgent requesterAgent, String serviceName)}<p>
	 * 
	 * This method requests a tracing service from any tracing entity which provides it. To request a tracing service from
	 * a specific tracing entity and receive only the trace events of the corresponding tracing service generated by that entity
	 * in the system, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#requestTracingService(BaseAgent requesterAgent, String serviceName, AgentID originEntity)} 
	 * 
	 * @param requesterAgent	Agent which wants to request the tracing service
	 * @param serviceName		Name of the tracing service which is to be requested
	 * 
	 * @see es.upv.dsic.gti_ia.core.TracingService
	 */
	static public void requestTracingService(BaseAgent requesterAgent, String serviceName) {
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.SUBSCRIBE);
		AgentID tms_aid = new AgentID("qpid://tm@localhost:8080");
		
		msg.setReceiver(tms_aid);
		msg.setSender(requesterAgent.getAid());
		msg.setLanguage("ACL");
		msg.setContent(String.valueOf(System.currentTimeMillis()) + "#" + serviceName + "#any");
		/**
		 * Sending a ACLMessage
		 */
		requesterAgent.send(msg);
	}
	
	/**
	 * Request a tracing service from any tracing entity.<p>
	 * 
	 * The requester agent must specify a name for the tracing service,
	 * the corresponding type of the trace events which will be provided
	 * by the service and a description of the tracing service.<p>
	 * 
	 * This method communicates via ACL with the trace manager entity specified
	 * by the parameter tms_aid. To interact with the default trace manager entity in
	 * localhost ("qpid://tm@localhost:8080"), use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#requestTracingService(AgentID tms_aid, BaseAgent requesterAgent, String serviceName)}<p>
	 * 
	 * This method requests a tracing service to receive trace events coming from any tracing entity which provides it.
	 * To request a tracing service a specific tracing entity and receive only the trace events which that tracing entity
	 * generates, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#requestTracingService(BaseAgent requesterAgent, String serviceName, AgentID originEntity)} 
	 * 
	 * @param tms_aid			AgentID of the trace manager entity which is being sent the request
	 * @param requesterAgent	Agent which wants to request the tracing service
	 * @param serviceName		Name of the tracing service which is to be requested  
	 * 
	 * @see es.upv.dsic.gti_ia.core.TracingService
	 */
	static public void requestTracingService(AgentID tms_aid, BaseAgent requesterAgent, String serviceName) {
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.SUBSCRIBE);
		
		msg.setReceiver(tms_aid);
		msg.setSender(requesterAgent.getAid());
		msg.setLanguage("ACL");
		msg.setContent(serviceName + "#any");
		/**
		 * Sending a ACLMessage
		 */
		requesterAgent.send(msg);
	}
	
	/**
	 * Request all tracing services available at the time.<p>
	 * 
	 * This method communicates via ACL with a trace manager entity in localhost
	 * ("qpid://tm@localhost:8080"). To interact with a different trace manager
	 * entity, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#requestAllTracingServices(AgentID tms_aid, BaseAgent requesterAgent)}
	 * 
	 * @param requesterAgent	Agent which wants to request tracing services
	 */
	static public void requestAllTracingServices(BaseAgent requesterAgent) {
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.SUBSCRIBE);
		AgentID tms_aid = new AgentID("qpid://tm@localhost:8080");
		
		msg.setReceiver(tms_aid);
		msg.setSender(requesterAgent.getAid());
		msg.setLanguage("ACL");
		msg.setContent("all");
		/**
		 * Sending a ACLMessage
		 */
		requesterAgent.send(msg);
	}
	
	/**
	 * Request all tracing services available at the time.<p>
	 * 
	 * This method communicates via ACL with the trace manager entity specified
	 * by the parameter tms_aid. To interact with the default trace manager entity in
	 * localhost ("qpid://tm@localhost:8080"), use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#requestAllTracingServices(BaseAgent requesterAgent)}
	 * 
	 * @param tms_aid			AgentID of the trace manager entity which is being sent the request
	 * @param requesterAgent	Agent which wants to request tracing services
	 */
	static public void requestAllTracingServices(AgentID tms_aid, BaseAgent requesterAgent) {
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.SUBSCRIBE);
		
		msg.setReceiver(tms_aid);
		msg.setSender(requesterAgent.getAid());
		msg.setLanguage("ACL");
		msg.setContent("all");
		/**
		 * Sending a ACLMessage
		 */
		requesterAgent.send(msg);
	}
	
	/**
	 * Cancel subscription to a tracing service from a specific tracing entity.<p>
	 * 
	 * This method communicates via ACL with a trace manager entity in localhost
	 * ("qpid://tm@localhost:8080"). To interact with a different trace manager
	 * entity, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#cancelTracingServiceSubscription(AgentID tms_aid, BaseAgent requesterAgent, String serviceName, AgentID originEntity)}<p>
	 * 
	 * This method cancels the subscription to a tracing service from a specific tracing entity. To cancel a subscription
	 * to any entity, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#cancelTracingServiceSubscription(BaseAgent requesterAgent, String serviceName)}
	 * 
	 * @param requesterAgent	Agent which wants to cancel its subscription
	 * @param serviceName		Name of the tracing service to which the subscription was made
	 * @param originEntity		AgentID of the tracing entity to which the subscription referred to  
	 */
	static public void cancelTracingServiceSubscription(BaseAgent requesterAgent, String serviceName, AgentID originEntity) {
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.CANCEL);
		AgentID tms_aid = new AgentID("qpid://tm@localhost:8080");
		
		msg.setReceiver(tms_aid);
		msg.setSender(requesterAgent.getAid());
		msg.setLanguage("ACL");
		msg.setContent(String.valueOf(System.currentTimeMillis()) + "#" + serviceName + "#" + originEntity.toString());
		/**
		 * Sending a ACLMessage
		 */
		requesterAgent.send(msg);
	}
	
	/**
	 * Cancel subscription to a tracing service from a specific tracing entity.<p>
	 * 
	 * This method communicates via ACL with the trace manager entity specified
	 * by the parameter tms_aid. To interact with the default trace manager entity in
	 * localhost ("qpid://tm@localhost:8080"), use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#cancelTracingServiceSubscription(BaseAgent requesterAgent, String serviceName, AgentID originEntity)}<p>
	 * 
	 * This method cancels the subscription to a tracing service from a specific tracing entity. To cancel a subscription
	 * to any entity, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#cancelTracingServiceSubscription(AgentID tms_aid, BaseAgent requesterAgent, String serviceName)}
	 * 
	 * @param tms_aid			AgentID of the trace manager entity which is being sent the request
	 * @param requesterAgent	Agent which wants to cancel its subscription
	 * @param serviceName		Name of the tracing service to which the subscription was made
	 * @param originEntity		AgentID of the tracing entity to which the subscription referred to  
	 */
	static public void cancelTracingServiceSubscription(AgentID tms_aid, BaseAgent requesterAgent, String serviceName, AgentID originEntity) {
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.CANCEL);
		
		msg.setReceiver(tms_aid);
		msg.setSender(requesterAgent.getAid());
		msg.setLanguage("ACL");
		msg.setContent(serviceName + "#" + originEntity.toString());
		/**
		 * Sending a ACLMessage
		 */
		requesterAgent.send(msg);
	}
	
	/**
	 * Cancel subscription to a tracing service from any tracing entity.<p>
	 * 
	 * This method communicates via ACL with a trace manager entity in localhost
	 * ("qpid://tm@localhost:8080"). To interact with a different trace manager
	 * entity, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#cancelTracingServiceSubscription(AgentID tms_aid, BaseAgent requesterAgent, String serviceName)}<p>
	 * 
	 * This method cancels the subscription to a tracing service from a specific tracing entity. To cancel a subscription
	 * to any entity, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#cancelTracingServiceSubscription(BaseAgent requesterAgent, String serviceName, AgentID originEntity)}
	 * 
	 * @param requesterAgent	Agent which wants to cancel its subscription
	 * @param serviceName		Name of the tracing service to which the subscription was made
	 */
	static public void cancelTracingServiceSubscription(BaseAgent requesterAgent, String serviceName) {
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.CANCEL);
		AgentID tms_aid = new AgentID("qpid://tm@localhost:8080");
		
		msg.setReceiver(tms_aid);
		msg.setSender(requesterAgent.getAid());
		msg.setLanguage("ACL");
		msg.setContent(String.valueOf(System.currentTimeMillis()) + "#" + serviceName + "#any");
		/**
		 * Sending a ACLMessage
		 */
		requesterAgent.send(msg);
	}
	
	/**
	 * Cancel subscription to a tracing service from any tracing entity.<p>
	 * 
	 * This method communicates via ACL with the trace manager entity specified
	 * by the parameter tms_aid. To interact with the default trace manager entity in
	 * localhost ("qpid://tm@localhost:8080"), use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#cancelTracingServiceSubscription(BaseAgent requesterAgent, String serviceName)}<p>
	 * 
	 * This method cancels the subscription to a tracing service from a specific tracing entity. To cancel a subscription
	 * to any entity, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#cancelTracingServiceSubscription(AgentID tms_aid, BaseAgent requesterAgent, String serviceName, AgentID originEntity)}
	 * 
	 * @param tms_aid			AgentID of the trace manager entity which is being sent the request
	 * @param requesterAgent	Agent which wants to cancel its subscription
	 * @param serviceName		Name of the tracing service to which the subscription was made
	 */
	static public void cancelTracingServiceSubscription(AgentID tms_aid, BaseAgent requesterAgent, String serviceName) {
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.CANCEL);
		
		msg.setReceiver(tms_aid);
		msg.setSender(requesterAgent.getAid());
		msg.setLanguage("ACL");
		msg.setContent(serviceName + "#any");
		/**
		 * Sending a ACLMessage
		 */
		requesterAgent.send(msg);
	}
	
	/**
	 * Request a list of registered tracing entities.<p>
	 * 
	 * This method communicates via ACL with a trace manager entity in localhost
	 * ("qpid://tm@localhost:8080"). To interact with a different trace manager
	 * entity, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#listTracingEntities(AgentID tms_aid, BaseAgent applicantAgent)}
	 * 
	 * @param applicantAgent	Agent which wants to receive the list of tracing entities
	 */
	static public void listTracingEntities(BaseAgent applicantAgent){
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);
		AgentID tms_aid = new AgentID("qpid://tm@localhost:8080");
		String body;
		
		msg.setReceiver(tms_aid);
		msg.setSender(applicantAgent.getAid());
		msg.setLanguage("ACL");
		body = "list" + "#entities";
		//System.out.println("Publication request: " + body);
		msg.setContent(body);
		/**
		 * Sending a ACLMessage
		 */
		applicantAgent.send(msg);
	}
	
	/**
	 * Request a list of registered tracing entities to a specific trace manager entity.<p>
	 * 
	 * This method communicates via ACL with the trace manager entity specified
	 * by the parameter tms_aid. To interact with the default trace manager entity in
	 * localhost ("qpid://tm@localhost:8080"), use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#listTracingEntities(BaseAgent applicantAgent)}
	 * 
	 * @param tms_aid			AgentID of the trace manager entity which is being sent the request
	 * @param applicantAgent	Agent which wants to receive the list of tracing entities
	 */
	static public void listTracingEntities(AgentID tms_aid, BaseAgent applicantAgent){
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);
		String body;
		
		msg.setReceiver(tms_aid);
		msg.setSender(applicantAgent.getAid());
		msg.setLanguage("ACL");
		body = "list" + "#entities";
		//System.out.println("Publication request: " + body);
		msg.setContent(body);
		/**
		 * Sending a ACLMessage
		 */
		applicantAgent.send(msg);
	}
	
	/**
	 * Request a list of registered tracing services.<p>
	 * 
	 * This method communicates via ACL with a trace manager entity in localhost
	 * ("qpid://tm@localhost:8080"). To interact with a different trace manager
	 * entity, use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#listTracingServices(AgentID tms_aid, BaseAgent applicantAgent)}
	 * 
	 * @param applicantAgent	Agent which wants to receive the list of tracing services
	 */
	static public void listTracingServices(BaseAgent applicantAgent){
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);
		AgentID tms_aid = new AgentID("qpid://tm@localhost:8080");
		String body;
		
		msg.setReceiver(tms_aid);
		msg.setSender(applicantAgent.getAid());
		msg.setLanguage("ACL");
		body = "list" + "#services";
		//System.out.println("Publication request: " + body);
		msg.setContent(body);
		/**
		 * Sending a ACLMessage
		 */
		applicantAgent.send(msg);
	}
	
	/**
	 * Request a list of registered tracing entities.<p>
	 * 
	 * This method communicates via ACL with the trace manager entity specified
	 * by the parameter tms_aid. To interact with the default trace manager entity in
	 * localhost ("qpid://tm@localhost:8080"), use the method
	 * {@link es.upv.dsic.gti_ia.trace.TraceInteract#listTracingServices(BaseAgent applicantAgent)}
	 * 
	 * @param tms_aid			AgentID of the trace manager entity which is being sent the request
	 * @param applicantAgent	Agent which wants to receive the list of tracing services
	 */
	static public void listTracingServices(AgentID tms_aid, BaseAgent applicantAgent){
		/**
		 * Building a ACLMessage
		 */
		ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);
		String body;
		
		msg.setReceiver(tms_aid);
		msg.setSender(applicantAgent.getAid());
		msg.setLanguage("ACL");
		body = "list" + "#services";
		//System.out.println("Publication request: " + body);
		msg.setContent(body);
		/**
		 * Sending a ACLMessage
		 */
		applicantAgent.send(msg);
	}
}
